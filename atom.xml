<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>御枫林下的小窝~</title>
  
  <subtitle>杂七杂八奇奇怪怪qwq</subtitle>
  <link href="https://agen233.top/atom.xml" rel="self"/>
  
  <link href="https://agen233.top/"/>
  <updated>2025-05-18T15:44:31.000Z</updated>
  <id>https://agen233.top/</id>
  
  <author>
    <name>御枫林下</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>更先进的终极看番解决方案</title>
    <link href="https://agen233.top/posts/8e2890be/"/>
    <id>https://agen233.top/posts/8e2890be/</id>
    <published>2025-04-01T21:04:11.000Z</published>
    <updated>2025-05-18T15:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前阵子趁着国补买了台电视，一直苦于没有相当优雅的全自动本地追番追剧方案，一直看码率高达1Mbps的”超清”流媒体，原本想着既然电视本身自带USB3.0，那么用机械硬盘+KODI的方案也能勉强用一下。</p><p>实际强行用下来也是发现了诸如，机械硬盘移动容易坏、没有背景墙、字幕难找、不能全自动等相当不优雅的痛点，而后看到了CN大佬的<a href="https://controlnet.space/2024/07/06/note/media-server/">比之前更进一步的终极看番工具栈 - ControlNet Blog</a>于是萌生了上NAS的想法。</p><p><img src="https://bu.dusays.com/2025/05/03/68160bca89a53.webp" alt="电视配置和信息"></p><blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>为了解决以上问题，我们需要一个更加完善的系统，这个系统将会搭载在一个上24小时开机的家庭服务器上，这个服务器可以是NAS，也可是软路由，或者是存算分离的Linux服务器。</p><p>考虑到不折腾，本人选择了自己DIY一个基于低功耗x86平台的NAS。考虑到折腾软路由可能会让网络没那么稳定，就没有打算在这套系统里使用软路由。家里现在是一台ASUS的硬路由，一台NAS，一台高性能的Linux服务器用于游戏服务器和爬虫脚本等等，然后是一台台式机用于日常游戏和学习。这样的设计是为了让每个设备都有自己的用途，不会因为一台设备的问题导致其他设备无法使用。这篇文章主要会讨论NAS上的部署。</p></blockquote><h1 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h1><p>综上所述各种痛点，<del>我们要对齐颗粒度，从痛点中来，到重点中去，为更优雅的观影方式赋能</del>打造更先进、更优雅和更进一步的完善系统，这个系统是7x24小时的、高可靠的、低能耗的家庭服务器，可以是NAS亦可以是其他树莓派等轻型Linux上。</p><p>基于上班天天写代码~~~看着就烦~~~懒得折腾的实际，不考虑折腾，最终选择了自己DIY一套基于完整x86平台的低功耗服务器，同时考虑到公网IPV6+DDNS的方案会导致整个家庭网络处于极度不安全的全暴露状态，所以还需要可靠的私有组网方案。</p><h1 id="硬件方案"><a href="#硬件方案" class="headerlink" title="硬件方案"></a>硬件方案</h1><p>这里使用了一台惠普800 G3 SFF准系统小主机，Q270方案，带奔腾G4560T，详细配置清单如下:</p><ul><li>CPU 英特尔奔腾G4560T, 双核四线程2.9G, 额定35WTDP</li><li>内存: 三星 DDR4 2400Mhz 8G单条</li><li>SSD: 卖家一并购买的, 来路不明的三星NVME 256G SSD</li><li>显卡: UHD610</li><li>电源: 惠普 80plus铂金 180W</li><li>内置IO: 3个SATA, 一个M.2(系统盘占用), 1个CPU直通PCIE3.0x16, 一个PCIE3.0x1, 一个南桥PCIE1.0x16</li><li>外部前置IO: 2个USB3.0(HightSpeed) 2个USB2.0(HightSpeed) 一个USB Type-C</li></ul><p>虽然里面只有三个SATA，但是胜在USB口多，后期真的不够用了，外接硬盘笼也是可以的。</p><h1 id="系统选择"><a href="#系统选择" class="headerlink" title="系统选择"></a>系统选择</h1><p>NAS系统现在主要是四个：TrueNAS，Unraid和黑群晖</p><ul><li>TrueNAS，前身是FreeNAS(基于FreeBSD)，是FreeNAS在Debian上的重构，商业公司支持，开源软件，个人用户免费</li><li>Unraid，基于Slackware Linux，有堪称完美的Docker和虚拟机支持，商业公司支持，闭源软件，个人用户收费，买断制</li><li>黑群晖，界面UI友好，系统兼容性一般，而且不免费不开源也不接受收费，需要破解，系非正版软件</li></ul><p>综上所述，结合自己不折腾的想法，只是单纯看个视频和放个文件，对速度和性能毫无要求，能拖动4K HDR视频，能转码4K视频即可，选择了最方便部署的飞牛OS</p><p>飞牛OS的部署非常简单，只需要找个U盘，上飞牛官网下载镜像，然后用rufus烧录进去，随后关闭安全启动用UEFI启动即可，过程是全图形化的。</p><p>飞牛支持RAID模式、BASIC模式和Linear模式，现在只有一个硬盘，于是就选择最基础的BASIC模式了，等新硬盘到了之后再考虑用Linear模式或者RAID模式</p><p><img src="https://bu.dusays.com/2025/04/01/67ec003d97b4d.webp" alt="飞牛WEB后台"></p><h1 id="基础配置和基本服务"><a href="#基础配置和基本服务" class="headerlink" title="基础配置和基本服务"></a>基础配置和基本服务</h1><h2 id="qBittorrent下载和PeerBanHelper防吸血"><a href="#qBittorrent下载和PeerBanHelper防吸血" class="headerlink" title="qBittorrent下载和PeerBanHelper防吸血"></a>qBittorrent下载和PeerBanHelper防吸血</h2><p>qBittorrent直接使用飞牛商店提供的套件即可，直接跑在宿主机而的，即开即用。不过要针对自己的网络环境做一些配置，以及</p><p>qBittorrent默认无限制做种，强烈建议打开分享率高于阈值则停止做种功能，否则上行吃满不说，还容易被运营商当成PCDN，被封网就得不偿失了。</p><p>tracker可以加强种子检索能力，我用的是<a href="https://github.com/adysec/tracker">adysec&#x2F;tracker</a>和<a href="https://github.com/DeSireFire/animeTrackerList">(24年停止维护)animeTrackerList (๑•̀ㅂ•́)و✧</a></p><h1 id="媒体库和电影墙"><a href="#媒体库和电影墙" class="headerlink" title="媒体库和电影墙"></a>媒体库和电影墙</h1><h2 id="飞牛影视？"><a href="#飞牛影视？" class="headerlink" title="飞牛影视？"></a>飞牛影视？</h2><p>蓝毛和CN大佬都极力推荐jellyfin，但是我觉得配置挺麻烦的，而且搜刮和字幕下载依赖各种插件而不是官方支持，以及动不动就服务器解码就很头痛。</p><p>飞牛OS提供了一键解决方案即飞牛影视，页面优雅、简单上手、自动生成背景墙，虽然检索能力还有点问题，经常乱检索，以及TV端对字幕支持还有问题，但问题都不大，关键是全自动的，折腾难度大大降低。</p><p><img src="https://bu.dusays.com/2025/04/01/67ec08467aaaa.webp" alt="飞牛影视 电影墙"></p><h2 id="JellyFin"><a href="#JellyFin" class="headerlink" title="JellyFin!"></a>JellyFin!</h2><p>飞牛影视确实好用，页面优雅、简单上手，但是对杜比视界、8KHDR10等次时代格式支持不好，对ASS特效字幕支持不友好，文件搜刮设定也不够灵活。</p><p>因此最后还是选择了JellyFin作为最终的影视管理工具，我承认，JellyFin这个海报屏保真的太戳我XP了，而且全平台客户端均为网页套壳，使得可以通过JellyFin提供的CSS接口，载入自己的CSS文件，进而实现全平台通用的页面高度定制。</p><p><img src="https://bu.dusays.com/2025/05/03/68160bcab47a1.webp" alt="电视JellyFin媒体页"></p><p><img src="https://bu.dusays.com/2025/05/03/68160eff184cf.webp" alt="JellyFin屏保"></p><p><img src="https://bu.dusays.com/2025/05/03/68160bcb09769.webp" alt="JellyFin屏保"></p><h3 id="MxPlay"><a href="#MxPlay" class="headerlink" title="MxPlay"></a>MxPlay</h3><p>前面提到，JellyFin全平台客户端均为网页套壳，播放器也是网页，所以对次时代格式和ASS特效字幕支持仍不友好，这里选择的是MxPlayPro作为电视端和手机端的外置播放器。</p><p>至少在我的设备上，MxPlay可以完美兼容各类视频格式，同时对于JellyFin也能完美地加载来自服务器的字幕文件和字幕所需字体文件，至于进度回传亦没有问题， 一开始用的VLC就是因为进度回传才弃坑的（</p><p><img src="https://bu.dusays.com/2025/05/03/68160bca84d92.webp" alt="MxPlay播放器"></p><p><img src="https://bu.dusays.com/2025/05/03/68160bcb11d29.webp" alt="外挂字幕字体文件 [拨雪寻春]葬送的芙莉莲"></p><p><img src="https://bu.dusays.com/2025/05/03/68160d5ce2f1a.webp" alt="外挂字幕ASS特效 [诸神字幕]忧国的莫里亚蒂"></p><p><img src="https://bu.dusays.com/2025/05/03/68160d5da9e3b.webp" alt="外挂字幕ASS特效 [诸神字幕]忧国的莫里亚蒂"></p><h3 id="至于桌面端"><a href="#至于桌面端" class="headerlink" title="至于桌面端"></a>至于桌面端</h3><p>这边目前用电脑看比较少，到是没啥所谓，但值得一提的是，MicrosoftEdge并不（实际上）支持HEVC全硬解，但是用Chrome就没这个问题（ <del>微软果然还是不够巨硬</del></p><h1 id="自动追番计划"><a href="#自动追番计划" class="headerlink" title="自动追番计划"></a>自动追番计划</h1><p>手动去找动画资源然后手动处理，是一件非常不优雅、非常难堪的事情，所以我们需要一些工具，将其彻底自动化。</p><p>首先需要<a href="https://mikanani.me/">蜜柑计划</a>，一个二次元动画动漫聚集平台，相对于更传统的<a href="http://comicat.org/">漫猫动漫</a>我认为他的交互更优雅，访问更快，同时他提供其他平台不可企及的RSS订阅服务，可以根据订阅的内容，自动生成RSS链接，随即交给qBittorrent进行全自动下载。</p><p>其次，需要<a href="https://docs.wushuo.top/">ASS</a>，即便是蜜柑支持生成RSS链接，但因为每个字幕组的名字风格和资源内容都不同，手动整理就会很麻烦，这时候就需要ASS，他可以直接在后台选择番剧，亦或是通过RSS，自动获取蜜柑上的番剧信息，随后自动处理命名和归档使其符合自己的规范，然后自动推送给qBittorrent下载，并在下载完成(下载+做种)后，自动删除遗留在qBittorrent列表中的内容。</p><p><img src="https://bu.dusays.com/2025/04/02/67ed39088ce88.webp" alt="ASS 番剧管理页面(图片来源于ASS官方)"></p><h1 id="IPV6-DDNS？IPV6-组网？"><a href="#IPV6-DDNS？IPV6-组网？" class="headerlink" title="IPV6+DDNS？IPV6+组网？"></a>IPV6+DDNS？IPV6+组网？</h1><p>虽然NAS是内网为主，但终究还是要实现公网访问的，不然就没办法在公司备份文件<del>看番</del>了。我坐标广东新会，用的是移动的500Mbps&#x2F;50Mbps家庭宽带，且有公网IPV6而无公网IPV4，手机移动网络和公司网络同样提供公网IPV6。</p><p>我一开始用的是IPV6+DDNS的方案，但一方面是HTTPS证书自动化很复杂，其次是路由器防火墙不能只针对某个端口放行，直接导致了整个局域网公网裸奔，毕竟<strong>HTTP无证书+DDNS+IPV6直通+关闭防火墙+SMB+RDP</strong>太危险了，只要设备本身的防火墙出现漏洞被打穿，特别是家里有众多智能家居设备，对于整个局域网来说就是灾难级的。</p><p>后来看到<a href="https://hin.cool/posts/tailscale.html">比zerotier更好的内网穿透方案——Tailscale | 瓦解的生活记事</a>的文章和JUP的极力推荐，进而上了TailScale进行组网，在双IPV6直通的情况下，延迟相当理想，只有40ms左右，而对于非双IPV6直通的情况下，由于我这靠近香港，再加上移动外网出口大，即便绕行中转，也才200ms左右。</p><p>总之，用组网方案就是一劳永逸的，只要设备本地不中毒、TailScale官方不整蛊作怪、TailScale账密不泄露，组网就是绝对安全的，因为组网下，不再需要关闭防火墙、不再需要本地公网暴漏。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>emmmm，这篇文章实际上是收到CN大佬的文章启发的，很多内容无论是软件设置还是文章本身都是抄过来的， 与此同时分享一下自己的经验和不一样的地方，希望对大家有所帮助。</p><p>也是上了班之后就对折腾这种东西越来越不上心了，相对于传统需要折腾的开源软件，现在还是更喜欢成熟的商业产品，即便是他收费的。</p><p>虽然飞牛OS还有很多十分不完善的地方，比如文件是基于飞牛系统上的账号和“XX分享的文件”这种相对不灵活的方式，比如飞牛影视带特效的字幕文件加载不出来会卡掉或者没特效，比如还不支持音频直通等，不过话说回来，免费的要什么自行车(</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前阵子趁着国补买了台电视，一直苦于没有相当优雅的全自动本地追番追剧方案，一直看码率高达1Mbps的”超清”流媒体，原本想着既然电视本身自带U</summary>
      
    
    
    
    <category term="技研笔记" scheme="https://agen233.top/categories/%E6%8A%80%E7%A0%94%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="NAS" scheme="https://agen233.top/tags/NAS/"/>
    
    <category term="Jellyfin" scheme="https://agen233.top/tags/Jellyfin/"/>
    
  </entry>
  
  <entry>
    <title>中科蓝讯AB2027开发兼踩坑备忘录</title>
    <link href="https://agen233.top/posts/617a7db7/"/>
    <id>https://agen233.top/posts/617a7db7/</id>
    <published>2025-02-16T17:06:56.000Z</published>
    <updated>2025-05-18T15:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="框架总述"><a href="#框架总述" class="headerlink" title="框架总述"></a>框架总述</h1><ul><li>AB202X系列采用基于冯诺依曼结构的32位RISC-V架构CPU, 提供高达120Mhz主频;</li><li>内置64KSRAM和8K缓存;</li><li>内置2M falsh</li><li>24 M晶体振荡电路，不需要外部加载电容器；</li><li>蓝牙5.2 BLE规范，支持LE 1M&#x2F;2M；</li><li>MIC放大器x1；高性能MONO Sigma-Delta ADC；</li></ul><p><img src="https://bu.dusays.com/2025/02/16/67b1bb0edfad8.png"></p><hr><h1 id="中断回调重启问题"><a href="#中断回调重启问题" class="headerlink" title="中断回调重启问题"></a>中断回调重启问题</h1><p>在SDK里用了GPIO外部中断的例程，发现一旦中断触发，进入回调，LOG即刻出现ERROR，随后自动复位;</p><p>通过翻阅蓝讯datasheet和芯片框架简述后发现，代码编写的时候需要注意<strong>com区</strong>和<strong>bank区</strong>的问题;</p><ul><li><p>com区: 程序放在并常驻在RAM(SRAM)中，具有较快响应速度，RAM开销大;</p></li><li><p>bank区: 程序放在flash中, 需要用的时候再动态加载到ram中, falsh和芯片之间走spi响应速度较慢, RAM开销小;</p></li></ul><h2 id="综上所述"><a href="#综上所述" class="headerlink" title="综上所述:"></a>综上所述:</h2><ol><li><strong>没有使用AT宏声明的函数, 默认放在bank区</strong></li><li><strong>中断回调以及其子函数必须放在com区</strong>, 放在bank区会死机; 中断相应需要非常即时, CPU直接读取com区, 可以做到较快相应, 而bank要先读取到ram, 则无法快速相应;</li><li><strong>中断回调以及其子函数不能存在switch函数</strong>, 因为switch语句编译生成的跳转表默认放在bank区, 务必使用if-else语句;</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回调</span></span><br><span class="line">AT(.com_text.gpio_isr) <span class="comment">// 中断回调必须放在isr中</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">gpio_inputer_handler</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  gpio_edge_pending_clear(); <span class="comment">// 清标志位</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// GPIO 初始化</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">gpio_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    gpio_edge_cap_typedef config;</span><br><span class="line"></span><br><span class="line">    config.edge = GPIO_EDGE_FALLING;</span><br><span class="line">    config.gpiox = IOKEY_PORT;</span><br><span class="line">    config.gpio_pin = IOKEY_PIN;</span><br><span class="line"></span><br><span class="line">    gpio_edge_capture_config(&amp;config);    <span class="comment">// 注册中断</span></span><br><span class="line">    gpio_edge_pic_config(gpio_inputer_handler, <span class="number">0</span>);    <span class="comment">// 注册回调</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="GPIO外部中断上升下降沿问题"><a href="#GPIO外部中断上升下降沿问题" class="headerlink" title="GPIO外部中断上升下降沿问题"></a>GPIO外部中断上升下降沿问题</h1><p>在用SPI跑外置LoRa模组的时候，LoRa模组带有一个DO1引脚，用于触发中断，宣告MCU模组进入相关状态, DO1引脚为上升沿触发，且需要手动发送报文拉低;</p><p>蓝讯GPIO外置中断问题在于，SDK和例程里所谓的<strong>GPIO_EDGE_FALLING</strong>上升沿和<strong>GPIO_EDGE_RISING</strong>下降沿并非真实电平沿触发,而是单纯高低电平触发;</p><p>正常来说DO1拉高-&gt;检测到上升沿-&gt;进入中断回调-&gt;清除GPIO中断标志位-&gt;读取LoRa状态标志位-&gt;清除LoRa模块中断标志位-&gt;DO1拉低; 此时只会触发一次中断; </p><p>但是蓝讯没有上升沿触发,进而会DO1拉高-&gt;检测到高电平-&gt;进入中断回调-&gt;清除GPIO中断标志位-&gt;检测到高电平-&gt;进入中断回调-&gt;清除GPIO标志位-&gt;……; 中断会被一直触发,进而卡在中断里面, 没法喂狗随后重启;</p><h2 id="解决办法是"><a href="#解决办法是" class="headerlink" title="解决办法是"></a>解决办法是</h2><p>进入中断回调后, 在中断回调执行 <strong>gpio_edge_pic_disable()</strong> 关闭所有电平沿中断, 随后处理完中断内容后, 再把<strong>WKUPCON</strong>寄存器反取,重新开启电平沿中断; 这样的问题在于, 关闭所有电平沿中断, 会导致其他GPIO中断也用不了;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回调</span></span><br><span class="line">AT(.com_text.gpio_isr) <span class="comment">// 中断回调必须放在isr中</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">gpio_inputer_handler</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  gpio_edge_pic_disable();    <span class="comment">// 关闭所有沿中断 </span></span><br><span class="line">  gpio_edge_pending_clear();  <span class="comment">// 清标志位</span></span><br><span class="line">  pass...                     <span class="comment">// 业务处理</span></span><br><span class="line">  pass...                     <span class="comment">// 业务处理</span></span><br><span class="line">  WKUPCON |= BIT(<span class="number">16</span>);         <span class="comment">// 重新开所有电平沿中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// GPIO 初始化</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">gpio_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    gpio_edge_cap_typedef config;</span><br><span class="line"></span><br><span class="line">    config.edge = GPIO_EDGE_FALLING;</span><br><span class="line">    config.gpiox = IOKEY_PORT;</span><br><span class="line">    config.gpio_pin = IOKEY_PIN;</span><br><span class="line"></span><br><span class="line">    gpio_edge_capture_config(&amp;config);    <span class="comment">// 注册中断</span></span><br><span class="line">    gpio_edge_pic_config(gpio_inputer_handler, <span class="number">0</span>);    <span class="comment">// 注册回调</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="SPI1被占用问题"><a href="#SPI1被占用问题" class="headerlink" title="SPI1被占用问题"></a>SPI1被占用问题</h1><p>AB2027A3除开魔改的LED载波SPI后, 实际上有两个标准SPI, 分别是SPI0和SPI1, 他们都支持完整的SPI四线标准通讯;</p><p>但是上文提到, 芯片片上内置有一个基于SPI协议的flash, 他占用了SPI1,  所以实际可供外设使用的只有一个SPI0, 好在SPI本身支持多设备;</p><p>这点在SPI应用手册和FQ中有提到;</p><hr><h1 id="官方datasheet"><a href="#官方datasheet" class="headerlink" title="官方datasheet"></a>官方datasheet</h1><p>此文档属官方datasheet链接的外链, 属于本站提供的非本站内容, 博主对其内容不负责;</p><div class="row">    <embed src="https://www.bluetrum.com/upload/file/202412/1734658965868620.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;框架总述&quot;&gt;&lt;a href=&quot;#框架总述&quot; class=&quot;headerlink&quot; title=&quot;框架总述&quot;&gt;&lt;/a&gt;框架总述&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;AB202X系列采用基于冯诺依曼结构的32位RISC-V架构CPU, 提供高达120Mhz主频;&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="芯途漫记" scheme="https://agen233.top/categories/%E8%8A%AF%E9%80%94%E6%BC%AB%E8%AE%B0/"/>
    
    
    <category term="中科蓝讯AB202X" scheme="https://agen233.top/tags/%E4%B8%AD%E7%A7%91%E8%93%9D%E8%AE%AFAB202X/"/>
    
    <category term="SPI" scheme="https://agen233.top/tags/SPI/"/>
    
  </entry>
  
  <entry>
    <title>博通编译脚本和编译器找不到相关文件</title>
    <link href="https://agen233.top/posts/15d61602/"/>
    <id>https://agen233.top/posts/15d61602/</id>
    <published>2024-12-30T21:30:10.000Z</published>
    <updated>2025-05-18T15:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前学习博通的时候，一直是在Windows克隆的代码，然后复制到共享文件夹中进行操作，修改文件后，在linux下进行编译，进而出现了编译脚本找不到部分文本文件的情况。</p><p>实际上这和Linux是LR换行而Windows是CRLR换行有关系，在Windows上Git的时候，会导致原本LR换行的文件被自动转换为CRLR，而Linux原生支持LR且不兼容CRLR，于是编译器不停报错，先是提示换行符，后压根没有错误信息，误导性比较强。<br>一劳永逸的方法是，在全程在Linux操作，在Linux克隆，在Linux编译，最后需要烧录了，再把bin拷贝出来，在Windows进行烧录操作。</p><p>但是在Linux下无论是直接用vim还是Vscode,他的字体渲染都非常奇怪，如果用来主编辑，渲染会特别奇怪，Linux发行版(linux)的字体渲染显然不如Windows，Linux操作也不太适合小白。</p><p>这时可以使用VSCode+RemoteSSH插件，实现在Windows本地环境，通过SSH远程连接到虚拟机的Linux环境，通过SSH结合天下第一VSCode编辑器，实现高效撸码（</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前学习博通的时候，一直是在Windows克隆的代码，然后复制到共享文件夹中进行操作，修改文件后，在linux下进行编译，进而出现了编译脚本找不到部分文本文件的情况。&lt;/p&gt;
&lt;p&gt;实际上这和Linux是LR换行而Windows是CRLR换行有关系，在Windows上Git</summary>
      
    
    
    
    <category term="芯途漫记" scheme="https://agen233.top/categories/%E8%8A%AF%E9%80%94%E6%BC%AB%E8%AE%B0/"/>
    
    
    <category term="BL602" scheme="https://agen233.top/tags/BL602/"/>
    
  </entry>
  
  <entry>
    <title>基于STM32F103软件模拟I2C的纯粹C语言面向对象尝试</title>
    <link href="https://agen233.top/posts/65212637/"/>
    <id>https://agen233.top/posts/65212637/</id>
    <published>2024-11-25T22:13:51.000Z</published>
    <updated>2025-05-18T15:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近也是秋招收到offer了，嵌软方向，本地企业，于是闲的没事干在学校开摆，顺便提升下代码水平。</p><p>于是首当其冲的就是指针和面向对象思维，emmmm怎么说呢，这方面蛮薄弱的，于是刚学了一点结构体指针的皮毛，结合之前比赛因为用了许多I2C设备而多次反复的初始化GPIO口的麻烦，尝试了下把I2C面向对象化，顺便复习下I2C。</p><h1 id="面向对象核心思想和C语言的实现"><a href="#面向对象核心思想和C语言的实现" class="headerlink" title="面向对象核心思想和C语言的实现"></a>面向对象核心思想和C语言的实现</h1><p>众所周知，向对象编程（Object-Oriented Programming，OOP）是一种通过抽象和封装来提高代码复用性和可维护性的编程范式，但是C语言他原生是面向过程语言，并未向Python和Java那样原生支持面向对象的特性。</p><p>C语言的精髓和核心是指针，通过指针直接操作内存，可以实现很多骚操作；加上C语言的struct结构体，以及typedef自定义类型，从而实现模拟类和对象；又因结构体支持结构体的嵌套，因此可以实现基于嵌套意义的类和方法继承；进而实现面向对象的思想和全部功能。</p><h2 id="面向对象的核心思想"><a href="#面向对象的核心思想" class="headerlink" title="面向对象的核心思想"></a>面向对象的核心思想</h2><p>面向对象编程的核心包括以下几方面：</p><ul><li><p><strong>封装</strong>：将数据和操作封装到单一的模块中，对外仅暴露接口，隐藏实现细节。</p></li><li><p><strong>继承</strong>：通过复用已有模块的属性和方法来实现扩展，避免重复代码。</p></li><li><p><strong>多态</strong>：基于对象类型的不同，动态调用合适的方法。</p></li></ul><h2 id="在C语言中模拟面向对象的方法"><a href="#在C语言中模拟面向对象的方法" class="headerlink" title="在C语言中模拟面向对象的方法"></a>在C语言中模拟面向对象的方法</h2><p>虽然 C 语言本身不支持类和对象，但可以通过结构体和函数指针模拟这些特性：</p><p>但由于C是为面向过程设计的，本质上仍然是面向过程的语言，因此类方法必须严格按照面向过程的顺序。</p><ul><li><p><strong>结构体实现封装</strong><br>结构体（<code>struct</code>）是 C 语言中组织数据的核心工具。可以在结构体中包含数据和函数指针，从而将操作封装为模块化的对象。</p></li><li><p><strong>函数指针实现多态</strong><br>通过在结构体中嵌入函数指针，可以动态绑定不同对象的行为。例如，不同设备可以通过函数指针调用各自的初始化和操作方法。</p></li><li><p><strong>嵌套结构体模拟继承</strong><br>使用嵌套的方式，使一个结构体拥有另一个结构体的成员，达到继承属性和方法的效果。</p></li></ul><h1 id="I2C——Inter-Integrated-Circuit集成电路总线"><a href="#I2C——Inter-Integrated-Circuit集成电路总线" class="headerlink" title="I2C——Inter-Integrated Circuit集成电路总线"></a>I2C——Inter-Integrated Circuit集成电路总线</h1><h2 id="I2C总线特性"><a href="#I2C总线特性" class="headerlink" title="I2C总线特性"></a>I2C总线特性</h2><p>I2C是一种广泛应用于嵌入式系统的串行通信协议，采用主从结构，通过两线完成数据传输。</p><ul><li><p>**两线结构：**SCL时钟、SDA数据。</p></li><li><p>**通讯可靠：**通过应答信号（ACK&#x2F;NACK）确认每次数据传输的成功</p></li><li><p>**开漏模式：**需要手动 &#x2F; 外部上拉，实现多设备同步半双攻。</p></li></ul><h2 id="I2C通讯基本过程"><a href="#I2C通讯基本过程" class="headerlink" title="I2C通讯基本过程"></a>I2C通讯基本过程</h2><ol><li><strong>启动条件（Start）</strong>：主机拉低 SDA 并拉高 SCL。</li><li><strong>地址传输</strong>：主机发送从设备地址，等待应答。</li><li><strong>数据读写</strong>：按字节传输数据，每字节后需要应答信号。</li><li><strong>停止条件（Stop）</strong>：主机拉低 SCL 后拉高 SDA。</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __I2C_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __I2C_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SoftI2C_t</span>&#123;</span></span><br><span class="line">    GPIO_TypeDef *SCL_Port;     <span class="comment">/* SCL引脚的GPIO端口 */</span></span><br><span class="line">    <span class="type">uint16_t</span>     SCL_Pin;       <span class="comment">/* SCL引脚的GPIO引脚编号 */</span></span><br><span class="line">    GPIO_TypeDef *SDA_Port;     <span class="comment">/* SDA引脚的GPIO端口 */</span></span><br><span class="line">    <span class="type">uint16_t</span>     SDA_Pin;       <span class="comment">/* SDA引脚的GPIO引脚编号 */</span></span><br><span class="line">    <span class="type">uint32_t</span>     Delay;         <span class="comment">/* 延时参数，用于控制时序 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 各种I2C操作函数的指针 */</span></span><br><span class="line">    <span class="type">void</span>(*Start)(<span class="keyword">struct</span> SoftI2C_t *self);</span><br><span class="line">    <span class="type">void</span>(*Stop)(<span class="keyword">struct</span> SoftI2C_t *self);</span><br><span class="line">    <span class="type">uint8_t</span>(*WriteByte)(<span class="keyword">struct</span> SoftI2C_t *self, <span class="type">uint8_t</span> byte);</span><br><span class="line">    <span class="type">uint8_t</span>(*ReadByte)(<span class="keyword">struct</span> SoftI2C_t *self, <span class="type">uint8_t</span> ack);</span><br><span class="line"></span><br><span class="line">&#125; SoftI2C_t;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SoftI2C_Init</span><span class="params">(SoftI2C_t *self)</span>;  <span class="comment">/* 初始化I2C */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;I2C.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义GPIO引脚操作 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCL_HIGH(self) GPIO_SetBits((self)-&gt;SCL_Port, (self)-&gt;SCL_Pin)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCL_LOW(self)  GPIO_ResetBits((self)-&gt;SCL_Port, (self)-&gt;SCL_Pin)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDA_HIGH(self) GPIO_SetBits((self)-&gt;SDA_Port, (self)-&gt;SDA_Pin)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDA_LOW(self)  GPIO_ResetBits((self)-&gt;SDA_Port, (self)-&gt;SDA_Pin)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDA_READ(self) GPIO_ReadInputDataBit((self)-&gt;SDA_Port, (self)-&gt;SDA_Pin)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* SysTick内核延迟 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> _SoftI2C_Delay(SoftI2C_t *self)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!self-&gt;Delay)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    SysTick-&gt;LOAD = <span class="number">72</span> * (self-&gt;Delay);<span class="comment">/* 设置定时器重装值 */</span></span><br><span class="line">SysTick-&gt;VAL = <span class="number">0x00</span>;<span class="comment">/* 清空当前计数值 */</span></span><br><span class="line">SysTick-&gt;CTRL = <span class="number">0x00000005</span>;<span class="comment">/* 设置时钟源为HCLK，启动定时器 */</span></span><br><span class="line"><span class="keyword">while</span>(!(SysTick-&gt;CTRL &amp; <span class="number">0x00010000</span>));<span class="comment">/* 等待计数到0 */</span></span><br><span class="line">SysTick-&gt;CTRL = <span class="number">0x00000004</span>;<span class="comment">/* 关闭定时器 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> _SoftI2C_GPIO_Init(SoftI2C_t *self)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (self-&gt;SCL_Port == GPIOB || self-&gt;SDA_Port == GPIOB) &#123;</span><br><span class="line">        </span><br><span class="line">        RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (self-&gt;SCL_Port == GPIOA || self-&gt;SDA_Port == GPIOA) &#123;</span><br><span class="line">        </span><br><span class="line">        RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_OD;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; </span><br><span class="line">    GPIO_InitStructure.GPIO_Pin   = self-&gt;SCL_Pin;</span><br><span class="line">    GPIO_Init(self-&gt;SCL_Port, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = self-&gt;SDA_Pin;</span><br><span class="line">    GPIO_Init(self-&gt;SDA_Port, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    SDA_HIGH(self);</span><br><span class="line">    SCL_HIGH(self);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">SoftI2C_Start</span><span class="params">(SoftI2C_t *self)</span></span><br><span class="line">&#123;</span><br><span class="line">    SDA_HIGH(self);</span><br><span class="line">    SCL_HIGH(self);</span><br><span class="line">    _SoftI2C_Delay(self);</span><br><span class="line">    SDA_LOW(self);</span><br><span class="line">    _SoftI2C_Delay(self); </span><br><span class="line">    SCL_LOW(self);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">SoftI2C_Stop</span><span class="params">(SoftI2C_t *self)</span></span><br><span class="line">&#123;</span><br><span class="line">    SCL_LOW(self);</span><br><span class="line">    SDA_LOW(self);</span><br><span class="line">    _SoftI2C_Delay(self);</span><br><span class="line">    SCL_HIGH(self);</span><br><span class="line">    SDA_HIGH(self);</span><br><span class="line">    _SoftI2C_Delay(self);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> <span class="title function_">SoftI2C_WriteByte</span><span class="params">(SoftI2C_t *self, <span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> ack = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (byte &amp; <span class="number">0x80</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            SDA_HIGH(self);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            SDA_LOW(self);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        byte &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        SCL_HIGH(self);</span><br><span class="line">        _SoftI2C_Delay(self);</span><br><span class="line">        SCL_LOW(self);</span><br><span class="line">        _SoftI2C_Delay(self);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待ACK响应</span></span><br><span class="line">    SDA_HIGH(self);</span><br><span class="line">    SCL_HIGH(self);</span><br><span class="line">    _SoftI2C_Delay(self);</span><br><span class="line">    ack = !SDA_READ(self);</span><br><span class="line">    _SoftI2C_Delay(self);</span><br><span class="line">    SCL_LOW(self);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ack;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> <span class="title function_">SoftI2C_ReadByte</span><span class="params">(SoftI2C_t *self, <span class="type">uint8_t</span> ack)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> byte = <span class="number">0</span>;</span><br><span class="line">    SDA_HIGH(self);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123;</span><br><span class="line">        byte &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        SCL_HIGH(self);</span><br><span class="line">        _SoftI2C_Delay(self);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (SDA_READ(self))&#123;</span><br><span class="line">            </span><br><span class="line">            byte |= <span class="number">0x01</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SCL_LOW(self);</span><br><span class="line">        _SoftI2C_Delay(self);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (ack)&#123;</span><br><span class="line">        </span><br><span class="line">        SDA_LOW(self);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        SDA_HIGH(self);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SCL_HIGH(self);</span><br><span class="line">    _SoftI2C_Delay(self);</span><br><span class="line">    SCL_LOW(self);</span><br><span class="line">    SDA_HIGH(self);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义构造函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SoftI2C_Init</span><span class="params">(SoftI2C_t *self)</span></span><br><span class="line">&#123;</span><br><span class="line">    _SoftI2C_GPIO_Init(self); </span><br><span class="line"></span><br><span class="line">    self-&gt;Start     = SoftI2C_Start;</span><br><span class="line">    self-&gt;Stop      = SoftI2C_Stop;</span><br><span class="line">    self-&gt;WriteByte = SoftI2C_WriteByte;</span><br><span class="line">    self-&gt;ReadByte  = SoftI2C_ReadByte;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近也是秋招收到offer了，嵌软方向，本地企业，于是闲的没事干在学校开摆，顺便提升下代码水平。&lt;/p&gt;
&lt;p&gt;于是首当其冲的就是指针和面向对象思维，emmmm怎么说呢，这方面蛮薄弱的，于是刚学了一点结构体指针的皮毛，结合之前比赛因为用了许多I2C设备而多次反复的初始化GP</summary>
      
    
    
    
    <category term="芯途漫记" scheme="https://agen233.top/categories/%E8%8A%AF%E9%80%94%E6%BC%AB%E8%AE%B0/"/>
    
    
    <category term="I2C" scheme="https://agen233.top/tags/I2C/"/>
    
  </entry>
  
  <entry>
    <title>不得原谅、不得解脱、无人生还</title>
    <link href="https://agen233.top/posts/32331f7/"/>
    <id>https://agen233.top/posts/32331f7/</id>
    <published>2024-10-16T13:35:25.000Z</published>
    <updated>2025-05-27T03:50:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>偶然看到哈肯出新歌了，原来是参加了综艺（不追剧人.jpgs</p><p>刚开始试听，鸡皮疙瘩就起来了，哈肯果然是哈肯，宝刀未老（火了大半个世纪的男人.jpg</p><p>披荆斩棘的哥哥、披荆斩棘克勤，我认为这首歌是哈肯真正意义上的挑战自我的”披荆斩棘”，是抛弃了过往40年以来的传统唱法习惯来选择一种全新的演绎方式。作为哈肯老粉，哈肯的歌一直是文人书生的内敛而优雅的流派的，因此也被人称“毫无感情全靠技巧”。</p><p>这首歌可能是为数不多的，外放形唱法且把自身脆弱而敏感的内心深处展现给别人的，但又是具有哈肯文人气质的内敛的。这对他来说是颠覆性的，我认为真的相当厉害。无论是之前的跨界合作，和现在的新的唱法的尝试，哈肯还是那个男人，还是那个不局限于且不被困于舒适圈的那个人，这可能是为什么他能火大半个世纪跨越多个世代的原因吧。</p><p>中国人的情感表达往往是内敛而折中的，需要一个中间媒介，即为“悲凉感”，通过长、深、远的积淀进而升华的一种BE美学。而抑郁症是一种生理性疾病，内敛+长深远&#x3D;内耗，他不是被歌颂的哈姆雷特，亦不是古典悲剧中的英雄，他是扭曲的、病态的、甚至是丑陋的。</p><p>回到音乐剧本身，我能明显感受出不协调、不和谐、不顺畅的感，它并不美，但正是这种不协调感恰好表达出了抑郁症的真实。</p><p>抑郁症不是什么网易云时尚单品，他没有美感，他不应该被赋予浪漫主义的色彩，</p><p><strong>这便是这部音乐剧，哈肯和黄潇所表达的：不得原谅、不得解脱、无人生还</strong></p><div class="video-container"><iframe src="//player.bilibili.com/player.html?autoplay=0&bvid=BV1kZ2mYaERX" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;偶然看到哈肯出新歌了，原来是参加了综艺（不追剧人.jpgs&lt;/p&gt;
&lt;p&gt;刚开始试听，鸡皮疙瘩就起来了，哈肯果然是哈肯，宝刀未老（火了大半个世纪的男人.jpg&lt;/p&gt;
&lt;p&gt;披荆斩棘的哥哥、披荆斩棘克勤，我认为这首歌是哈肯真正意义上的挑战自我的”披荆斩棘”，是抛弃了过往40</summary>
      
    
    
    
    <category term="拾光笔记" scheme="https://agen233.top/categories/%E6%8B%BE%E5%85%89%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="音乐" scheme="https://agen233.top/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>风、诗歌和远方 | 豪爵USR125记</title>
    <link href="https://agen233.top/posts/670529b6/"/>
    <id>https://agen233.top/posts/670529b6/</id>
    <published>2024-09-17T14:49:29.000Z</published>
    <updated>2024-09-17T14:49:29.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning flat"><i class="solitude fas fa-info-circle"></i><p>本文为体验测评纯主观内容, 纯粹个人喜欢喝选择, 无需理由, 亦不是广告。</p></div><div class="note warning flat"><i class="solitude fas fa-info-circle"></i><p>文章内所有外链和商品购买链接, 均属普通分享, 博主不对其内容任何负责。</p></div><p>暑假去项目实训了，天天来回30公里，也是骑了两年的从我妈手上拿到的老爷本田车终于支撑不住了，油耗高不说，一个星期五天有三天把我扔路上了，于是忍无可忍之下也是萌生了买车的想法。一方面，买车是全力倚父母的结果，所以预算不能太高，只能控制在15k以内。</p><p><img src="https://bu.dusays.com/2024/12/11/67595ecd77eb8.webp"></p><h1 id="购买背景"><a href="#购买背景" class="headerlink" title="购买背景"></a>购买背景</h1><p>首先对于我来说，由于经常只在市区跑，所以大排量反而没啥卵用。一开始是想看看小狒狒跟幼兽，但是试驾的时候发现，在市区频繁掐离合麻烦的要命，再加上我本身开惯了踏板车，于是在乎，还是重新考虑会通勤王者125踏板</p><p>先说说新大洲本田NS125LA，本身本田这个名字就已经足够成为购买的理由了，而且小复古的车型也怪可爱的，更不用说全车LED、无钥匙启动这种配置了，但是试驾的时候就发现，这辆车轴距只有1246毫米，我176cm坐上去蛮挤的，更别说带人了，而且都是6.6&#x2F;7500千瓦&#x2F;转的发动机，价格却来到了12k，感觉性价比比较一般。</p><p>其次是济南铃木UU和UY，一开始确实是想着直接看铃木的，铃木超级芯是国内125踏板车毫无疑问的标杆，起步轻，后段加速强，油耗还低。但是把铃木的车架蛮差的，坐上去的时候感觉蛮软的，而且漆水外壳太垃了，UU的仪表还是上世纪的指针仪表；两辆车的外观也不是很好看，一股老年人的感觉，比较难顶。</p><p>最后是USR125和AFR125，AFR有绝对加分项ABS，但是没有斜脚踏外加车太重了破ESS带不动，最后还是选了USR125（</p><h1 id="提车"><a href="#提车" class="headerlink" title="提车"></a>提车</h1><p>粤J本地是豪爵大本营嘛，于是价格一分不降，跟车行老板扯来扯去，终于8780拿下了🤤。</p><p>全新护杠尾箱版，师傅在装车</p><p><img src="https://bu.dusays.com/2024/09/17/66e932b45caba.png" alt="img"></p><h1 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h1><h1 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h1><p>一个月开了400公里，续航还不错，70公里掉第一格油。提速比较给力，0-60跟电动车一样，摸一下就窜上去了。就是原装机油总觉得油门发闷，等磨合期过了之后，估计换上壳的10w40会好很多。</p><p>至于小毛病啥的，有，但问题不是特别大，一是减震软而行程短，带人的时候很容易触底，如果一个人过大一点的减震也有点吃不消。二是这个破卤素大灯的角度太高了，近光跟别人远光一样，开远光直接照车顶，讲道理这个大灯的亮度应该还行，如果能把角度调下去应该还可以接受，那个调节大灯高度的塑料螺丝我一手下去就花了，就emmmm，考虑下以后换LED吧。</p><h1 id="改装件"><a href="#改装件" class="headerlink" title="改装件"></a>改装件</h1><h2 id="1-摩羯星GT10C2"><a href="#1-摩羯星GT10C2" class="headerlink" title="1. 摩羯星GT10C2"></a>1. 摩羯星GT10C2</h2><p>讲道理，现在治安那么好，外加这边摩托车本身就满街都是，理论上是不用担心被偷的。但是还是第一时间装了摩羯星的GPS，防不防盗不重要，关键是看定位比较好玩（ </p><p>摩羯星嘛，车友都比较熟悉了，应该相对比较稳定吧，GPS自带备用锂电池，不伤电池。</p><p>商家有选配的豪爵车防盗器转接对插线，直接插到原车接口就行了，应该是直接连接行车电脑的，断电熄火什么的功能都是全部可用的，电池电压也能读取。</p><h2 id="2-双闪开关"><a href="#2-双闪开关" class="headerlink" title="2. 双闪开关"></a>2. 双闪开关</h2><p>这玩意我认为是优先级比较高的东西，之前因为被仍在路上，所以叫拖车的时候，车子没双闪嘛，不知道打什么灯提示后车，一个是蛮危险的，第二个被后车要超车的滴滴滴也挺烦的。</p><p>个人认为双闪就是纯粹的双闪，没必要上什么流水双闪、刹车爆闪之类的，所以就上了最普通的双闪按钮，没有上控制器之类的，上控制器还得研究怎么接线，更麻烦了。</p><h2 id="3-LED一体式双光透镜大灯"><a href="#3-LED一体式双光透镜大灯" class="headerlink" title="3. LED一体式双光透镜大灯"></a>3. LED一体式双光透镜大灯</h2><p>emmm，之前没想换的，但是的确原车的30W卤素大灯确实不够亮而且难用，我也是想不到都2024年了，豪爵还上这种蜡烛灯，欧司朗竟然也还在生产这种电子垃圾。讲道理你都欧司朗了，上个LED又能差多少价格。</p><p>之前想买的是无痕家的LED，无他主打一个便宜，但是一个是没透镜比较麻烦，第二个是虽然能免费换新，但是很多老哥都说灯珠很容易发黑？</p><p>于是抖音换了夜行之眼家的LED双光透镜大灯，H4原车灯头，一体式无需外挂电源，自带双滚珠风扇，看着感觉还行。45W的功率亮度相当够用了，近光够亮而远光够远，就是不知道为什么不出55W之类的大功率的，效果不是更好嘛。</p><p><strong>拍照的原因，实际上效果远比图片好</strong></p><p>目前还要继续用才能知道有什么问题，耐用性、灯罩耐温、电池电压等都要等日后才发现并补充。</p><h2 id="4-数码鸽行车记录仪"><a href="#4-数码鸽行车记录仪" class="headerlink" title="4. 数码鸽行车记录仪"></a>4. 数码鸽行车记录仪</h2><p>emmm，最主要是为了防止碰瓷嘛，外加还能记录行车轨迹，方便以后看轨迹。行车记录仪这种东西嘛，汽车的还好，摩托车的水特别深，价格还贵（</p><p>首当其冲考虑的肯定是HFK家的，毕竟老牌子，售后也不错，但是就是比较贵，而且有高价低配的嫌疑，于是放弃了。</p><p>思来想去，决定买了PDD榜一爆款，数码鸽家的，前后双摄，虽然是模拟摄像头，但是也做到1080P，帧率就不追求了，毕竟价格摆在这里。</p><h2 id="5-八爪鱼球头手机支架"><a href="#5-八爪鱼球头手机支架" class="headerlink" title="5. 八爪鱼球头手机支架"></a>5. 八爪鱼球头手机支架</h2><p>这个要说一下，总所周知，由于豪爵ESS发动机减震甩块设计问题，全系ESS发动机，只要后座负荷大，车体向后压，就会导致手把震得特别严重，于是普通手机支架在上面，屏幕都丢碎了（</p><p>刷了好久抖音，发现无痕假的感觉还不错？买来试试，还是很抖，不知道是我安装方式有问题，还是轮胎胎压不足之类的导致的，总之还是很抖，红绿灯怠速抖到看不清屏幕那种<br>手机光学防抖：焯<br>最近考虑换掉这个手机支架了，抖得有点难受的一批（</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note warning flat&quot;&gt;&lt;i class=&quot;solitude fas fa-info-circle&quot;&gt;&lt;/i&gt;&lt;p&gt;本文为体验测评纯主观内容, 纯粹个人喜欢喝选择, 无需理由, 亦不是广告。&lt;/p&gt;&lt;/div&gt;

&lt;div class=&quot;no</summary>
      
    
    
    
    <category term="拾光笔记" scheme="https://agen233.top/categories/%E6%8B%BE%E5%85%89%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="豪爵USR125" scheme="https://agen233.top/tags/%E8%B1%AA%E7%88%B5USR125/"/>
    
  </entry>
  
  <entry>
    <title>都市天际线政策面板指北</title>
    <link href="https://agen233.top/posts/1292e32b/"/>
    <id>https://agen233.top/posts/1292e32b/</id>
    <published>2024-09-17T01:19:04.000Z</published>
    <updated>2025-05-18T15:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>众嗦粥汁，政策是天际线经营玩法的精髓之所在，他是治理城市的有力工具，决定了你的城市包括但不限于收支、吸引度、幸福度等诸多功能。而各种政策，则是由政策面板提供 (</p><h2 id="服务政策"><a href="#服务政策" class="headerlink" title="服务政策"></a>服务政策</h2><table><thead><tr><th align="center">政策</th><th align="center">DLC需求</th><th align="center">解锁等级</th><th align="center">正作用</th><th align="center">维护费用&#x2F;副作用</th><th>特别描述</th></tr></thead><tbody><tr><td align="center">节水措施</td><td align="center">&#x2F;</td><td align="center">富有的村庄</td><td align="center">中度减少水资源消耗（减少 15%）</td><td align="center">5 科朗&#x2F;周&#x2F;建筑</td><td></td></tr><tr><td align="center">节电措施</td><td align="center">&#x2F;</td><td align="center">富有的村庄</td><td align="center">中度减少电力消耗（减少 15%）</td><td align="center">5 科朗&#x2F;周&#x2F;建筑</td><td></td></tr><tr><td align="center">安装烟雾探测器</td><td align="center">&#x2F;</td><td align="center">富有的村庄</td><td align="center">显著降低火灾发生机率</td><td align="center">5 科朗&#x2F;周&#x2F;建筑</td><td></td></tr><tr><td align="center">禁养宠物</td><td align="center">&#x2F;</td><td align="center">小城镇</td><td align="center">轻度减少垃圾排放量</td><td align="center">轻度减少幸福度</td><td></td></tr><tr><td align="center">资源回收</td><td align="center">&#x2F;</td><td align="center">快速发展的城镇</td><td align="center">轻度减少垃圾排放量</td><td align="center">轻度减少税收收入</td><td></td></tr><tr><td align="center">禁烟令</td><td align="center">&#x2F;</td><td align="center">小城镇</td><td align="center">轻度增加健康度</td><td align="center">轻度减少幸福度</td><td></td></tr><tr><td align="center">景观美化</td><td align="center">&#x2F;</td><td align="center">小城镇</td><td align="center">公园和购物广场周围的土地适度升值</td><td align="center">公园和购物广场的预算增加 20%</td><td></td></tr><tr><td align="center">加强教育</td><td align="center">&#x2F;</td><td align="center">大型城镇</td><td align="center">年轻人优先考虑接受教育而非工作</td><td align="center">增加 25% 教育预算</td><td></td></tr><tr><td align="center">允许娱乐活动</td><td align="center">&#x2F;</td><td align="center">快速发展的城镇</td><td align="center">轻度增加税收。中度增加游客。轻度减少犯罪</td><td align="center">+15% 警察预算</td><td>指美式特殊娱乐，比如吸叶子和特殊服务等</td></tr><tr><td align="center">免费公共运输</td><td align="center">&#x2F;</td><td align="center">忙碌的城镇</td><td align="center">增加公共交通使用量</td><td align="center">公交车、有轨电车、地铁、本地列车或单轨列车将没有收入</td><td></td></tr><tr><td align="center">走出校园</td><td align="center">夜生活（After Dark）</td><td align="center">小城镇</td><td align="center">市民比求学更喜欢就业，并且只有一小部分符合资格的市民会去就读大学</td><td align="center">受过高等教育的市民变得更少</td><td>先找工作&gt;读书；贴吧翻译：读书无用</td></tr><tr><td align="center">严酷监禁刑罚</td><td align="center">夜生活（After Dark）</td><td align="center">大型城镇</td><td align="center">将监狱刑期延长至原来的两倍，用严刑峻法让坏蛋们离开街头更长的时间</td><td align="center">监狱刑期加倍；占用牢房更久</td><td></td></tr><tr><td align="center">加装额外隔热计划</td><td align="center">冰天雪地（Snowfall）</td><td align="center">快速发展的城镇</td><td align="center">由于建筑物的墙上及天花板上安装有额外隔热层，使得其对暖气的需求降低</td><td align="center">因建设&#x2F;维护费用增加，导致税收减少</td><td></td></tr><tr><td align="center">禁止电力供暖</td><td align="center">冰天雪地（Snowfall）</td><td align="center">快速发展的城镇</td><td align="center">建筑只能通过供暖站供暖。降低电力消耗</td><td align="center">增加对城市供热服务的需求</td><td></td></tr><tr><td align="center">纯电力供暖</td><td align="center">冰天雪地（Snowfall）</td><td align="center">快速发展的城镇</td><td align="center">建筑被禁止使用暖气；只能使用电力取暖</td><td align="center">寒冷天气中的电力需求急剧增加</td><td></td></tr><tr><td align="center">直升机优先权</td><td align="center">大灾难（Natural Disasters）</td><td align="center">忙碌的城镇</td><td align="center">应急服务设施将启用直升机而不是地面载具</td><td align="center">&#x2F;</td><td>一般情况下，直升机只管森林大火；开启后允许直升机对非森林建筑进行灭火</td></tr><tr><td align="center">偏好渡轮</td><td align="center">公共交通（Mass Transit）</td><td align="center">快速发展的城镇</td><td align="center">市民更喜欢乘坐渡船在城市中活动</td><td align="center">2 科朗&#x2F;使用中的渡船</td><td></td></tr><tr><td align="center">高票价</td><td align="center">公共交通（Mass Transit）</td><td align="center">快速发展的城镇</td><td align="center">将公共交通票价提高 25% 可获得更多的利润。</td><td align="center">导致乘客减少。</td><td></td></tr><tr><td align="center">教育飞艇</td><td align="center">公共交通（Mass Transit）</td><td align="center">大型城镇</td><td align="center">将飞艇上的广告切换为教育公告，以稍微促进教育事业。</td><td align="center">&#x2F;</td><td></td></tr><tr><td align="center">塑料回收</td><td align="center">绿色都市（Green Cities）</td><td align="center">快速发展的城镇</td><td align="center">回收中心效率 +20%</td><td align="center">100 科朗&#x2F;回收中心&#x2F;周</td><td></td></tr><tr><td align="center">偏爱公园</td><td align="center">公园生活（Parklife）</td><td align="center">小城镇</td><td align="center">公园，广场与公园区域吸引游客量提升 10%</td><td align="center">100 科朗&#x2F;政策生效范围内的公园，广场及公园区域</td><td></td></tr><tr><td align="center">公园维护提升</td><td align="center">公园生活（Parklife）</td><td align="center">小城镇</td><td align="center">公园维护车值班时间增加 50%</td><td align="center">80 科朗&#x2F;公园维护部门建筑</td><td></td></tr><tr><td align="center">免费Wi-Fi</td><td align="center">工业（Industries）</td><td align="center">快速发展的城镇</td><td align="center">降低 15% 邮件积累速度</td><td align="center">2 科朗&#x2F;建筑</td><td></td></tr><tr><td align="center">自动分拣系统</td><td align="center">工业（Industries）</td><td align="center">大型城镇</td><td align="center">增加 10% 邮件处理容量</td><td align="center">300 科朗&#x2F;每邮件服务建筑</td><td></td></tr><tr><td align="center">营利教育</td><td align="center">校园（Campus）</td><td align="center">大型城镇</td><td align="center">教育建筑的维护减少 50%</td><td align="center">市民幸福度减少</td><td></td></tr><tr><td align="center">书展</td><td align="center">校园（Campus）</td><td align="center">忙碌的城镇</td><td align="center">公共图书馆范围内增加幸福度和娱乐</td><td align="center">公共图书馆维护费用增加 100%</td><td></td></tr><tr><td align="center">基于水藻的水过滤</td><td align="center">日落港口（Sunset Harbor)</td><td align="center">忙碌的城镇</td><td align="center">进水的过滤和排水管道的净化水平提高 45%</td><td align="center">海藻养殖场产量减少 50%；水设施的维护费用增加 15%</td><td>需要海藻养殖场</td></tr><tr><td align="center">捕鱼许可证</td><td align="center">日落港口（Sunset Harbor)</td><td align="center">小城镇</td><td align="center">所有住宅税收增加 5%</td><td align="center">市民的幸福度降低 5% ；犯罪增加 5% 。</td><td></td></tr><tr><td align="center">游客旅游卡</td><td align="center">日落港口（Sunset Harbor)</td><td align="center">大型城镇</td><td align="center">城市的游客数量将增加 8%</td><td align="center">城际公交网络维护费用提高 15%</td><td></td></tr></tbody></table><h2 id="税收"><a href="#税收" class="headerlink" title="税收"></a>税收</h2><h2 id="城市规划"><a href="#城市规划" class="headerlink" title="城市规划"></a>城市规划</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;众嗦粥汁，政策是天际线经营玩法的精髓之所在，他是治理城市的有力工具，决定了你的城市包括但不限于收支、吸引度、幸福度等诸多功能。而各种政策，则是由政策面板提供 (&lt;/p&gt;
&lt;h2 id=&quot;服务政策&quot;&gt;&lt;a href=&quot;#服务政策&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="游戏世界" scheme="https://agen233.top/categories/%E6%B8%B8%E6%88%8F%E4%B8%96%E7%95%8C/"/>
    
    
    <category term="Cites:Skylines" scheme="https://agen233.top/tags/Cites-Skylines/"/>
    
  </entry>
  
  <entry>
    <title>「幻想乐园」| 陈致逸全新专辑试听体验</title>
    <link href="https://agen233.top/posts/bd9973bb/"/>
    <id>https://agen233.top/posts/bd9973bb/</id>
    <published>2024-07-25T16:40:58.000Z</published>
    <updated>2025-05-18T15:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>刷b站的时候突然发现陈老师出新专辑了，当场就把数字专辑买了（</p><p>一开始还以为是原神出新OST了，后来才发现陈老师已经离开米哈游了（</p><p>之前听了MV，很浓的枫丹感涌上来，这是初听。</p><p>细听才发现，这不是枫丹感，这是独属于陈老师的告白。</p><p>乱舞、指环、回廊、朋友，这是陈老师对过往和原神的告别，亦是新旅程的开始。</p><p><strong>与其说有枫丹感，更不如说，《幻想乐园》即便是专属于陈老师的枫丹！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;刷b站的时候突然发现陈老师出新专辑了，当场就把数字专辑买了（&lt;/p&gt;
&lt;p&gt;一开始还以为是原神出新OST了，后来才发现陈老师已经离开米哈游了（&lt;/p&gt;
&lt;p&gt;之前听了MV，很浓的枫丹感涌上来，这是初听。&lt;/p&gt;
&lt;p&gt;细听才发现，这不是枫丹感，这是独属于陈老师的告白。&lt;/p</summary>
      
    
    
    
    <category term="拾光笔记" scheme="https://agen233.top/categories/%E6%8B%BE%E5%85%89%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="音乐" scheme="https://agen233.top/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>软件方向软考学习记录（一）</title>
    <link href="https://agen233.top/posts/b2ce6d03/"/>
    <id>https://agen233.top/posts/b2ce6d03/</id>
    <published>2024-07-11T18:18:40.000Z</published>
    <updated>2025-05-18T15:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning flat"><i class="solitude fas fa-info-circle"></i><p>由于最近有其他安排，软考计划和文章将无限期搁置，有空再考虑。</p></div><p>最近闲的没事干，在准备软考，有误还劳烦各位斧正。只是记录一下，不完全正确</p><p>这是第一部分，主要是计算机系统基础部分。</p><h1 id="计算机系统"><a href="#计算机系统" class="headerlink" title="计算机系统"></a>计算机系统</h1><h2 id="计算机系统基础"><a href="#计算机系统基础" class="headerlink" title="计算机系统基础"></a>计算机系统基础</h2><h3 id="基本构成"><a href="#基本构成" class="headerlink" title="基本构成"></a>基本构成</h3><p>计算机的基本构成由控制器、运算器、储存器、输入设备和输出设备五大结构组成。运算器、控制器以及其他外围设备被集成起来，称为中央处理器，即CPU。</p><p>所以又被称为计算机三大子系统，即：中央处理器(CPU)、主储存器和输入输出设备。</p><ul><li>控制器：计算机的控制系统，使计算机能够按照特定的步骤自动执行操作，以完成特定任务。</li><li>运算器：执行特定的诸如加减法、布尔运算等逻辑运算。</li><li>储存器：分为内储存器(主存&#x2F;内存)和外储存器，前者容量小而速度快，用于存放程序和中间数据；后者容量大而速度慢，用于数据的长期存放。</li><li>输入设备和输出设备：输入数据和输出数据。</li></ul><h3 id="校验码"><a href="#校验码" class="headerlink" title="校验码"></a>校验码</h3><p>校验码保证数据交互的准确性，一方面提升硬件电路的可靠性，另一方面提高代码的校验能力。</p><p>校验码包括查错和纠错</p><ol><li><p>奇偶校验码：在数据的最高位或者最低位添加一位用于表明采取奇校验还是偶校验。</p><p>奇校验：整个校验码（有效数据位+校验位）中的 “1” 的个数为<strong>奇数个</strong></p><p>奇校验：整个校验码（有效数据位+校验位）中的 “1” 的个数为<strong>偶数个</strong> \</p><p>奇偶校验码只能校验1个位，因而只能检错而无法纠错。</p></li><li><p>海明码：实质是多重分组的奇偶校验码，利用容斥思想进行纠错。</p><ul><li><p>当发送信息为<strong>2-4位</strong>，则校验位至少为<strong>3</strong>位</p></li><li><p>当发送信息为<strong>5-11位</strong>，则校验位至少为<strong>4</strong>位</p><p>即：信息位 + k校验位 &lt;&#x3D; 2^k校验位</p></li></ul></li><li><p>CRC循环冗余码</p></li></ol><h2 id="计算机体系结构"><a href="#计算机体系结构" class="headerlink" title="计算机体系结构"></a>计算机体系结构</h2><h3 id="计算机结构分类"><a href="#计算机结构分类" class="headerlink" title="计算机结构分类"></a>计算机结构分类</h3><ol><li>宏观分类（按照处理机数量）：<ul><li>单处理系统：只有一个处理单元与外部其他设备相结合的系统</li><li>多处理系统：将两个或两个以上多个处理单元和其他设备相结合，通过特定通讯协议进协调。</li><li>分布式：远距离且松散的多计算机系统。</li></ul></li><li>微观分类（并行速度分）</li></ol><h3 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h3><ol><li>复杂指令集CISC</li><li>精简指令集RISC</li></ol><h2 id="计算机安全"><a href="#计算机安全" class="headerlink" title="计算机安全"></a>计算机安全</h2><p>pass …</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note warning flat&quot;&gt;&lt;i class=&quot;solitude fas fa-info-circle&quot;&gt;&lt;/i&gt;&lt;p&gt;由于最近有其他安排，软考计划和文章将无限期搁置，有空再考虑。&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;最近闲的没事干，在准备软考，有误还劳</summary>
      
    
    
    
    <category term="无限进步" scheme="https://agen233.top/categories/%E6%97%A0%E9%99%90%E8%BF%9B%E6%AD%A5/"/>
    
    
    <category term="软考" scheme="https://agen233.top/tags/%E8%BD%AF%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>上手GY-30(BH1750)光强度传感器和相关程序代码</title>
    <link href="https://agen233.top/posts/7f0447f2/"/>
    <id>https://agen233.top/posts/7f0447f2/</id>
    <published>2024-06-17T16:17:59.000Z</published>
    <updated>2025-05-18T15:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写比赛的文档的时候，写到了BH1750的参数之类的，于是想着想都想了，不如写下来玩玩。<br>emmmm，这边用的是STM32F103C8T6的芯片的标准库，其他MCU也大同小异，如果是用hal库就更好了，无需管GPIO口初始化那堆零碎的事情了。</p><h1 id="模块和芯片"><a href="#模块和芯片" class="headerlink" title="模块和芯片"></a>模块和芯片</h1><p>而BH1750是一款数字型的光强传感器片上集成芯片，采用标准I2C总线协议与MCU进行链接。</p><p>GY-30模块的实质是BH1750，只是把外围诸如滤波和电容之类的电路整合进去了而已，其实都是用的BH1750芯片。</p><p>BH1750内部电路是由：光敏二极管、运算放大器、AD转换器等组成。光敏二极管通过光伏效应接收光信号产生电信号，经过运算放大后，由AD转换器采集电压数据并转换为数字信号，然后储存在寄存器之中。BH1750支持完全的I2C协议，使用I2C总线发送特定的控制位，即可读取光强度数据，亦可以修改BH1750的采集模式。</p><p><img src="https://bu.dusays.com/2024/06/17/666fcc8833ccd.png" alt="BH1750内部"></p><h2 id="引脚定义"><a href="#引脚定义" class="headerlink" title="引脚定义"></a>引脚定义</h2><p>BH1750支持且仅支持完整的I2C总线，采用四线传输方式，但由于BH1750模块本身可以从硬件对其设备地址进行修改，所以还多一个修改位。</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>VCC</td><td>接入 3.3V 电源正极</td></tr><tr><td>SCL</td><td>I2C时钟同步总线</td></tr><tr><td>SDA</td><td>I2C实际数据总线</td></tr><tr><td>ADDR</td><td>I2C设备地址切换线；低电平：0x23，高电平：0x5C</td></tr><tr><td>GND</td><td>接地或者电源负极</td></tr></tbody></table><h1 id="I2C协议"><a href="#I2C协议" class="headerlink" title="I2C协议"></a>I2C协议</h1><p>前面说到，BH1750模块支持完整的I2C总线协议。I2C总线是由飞利浦公司推出的串行、半双工总线，它是总线通讯，可以在总线上最高挂载112个设备（含保留地址则为127个设备）。</p><p>I2C总线是一种多主机总线，连接在 I2C总线上的器件分为主机和从机。 主机有权发起和结束一次通信，从机只能被动呼叫。每个I2C设备有一个唯一的7bit地址，由于需要告知从机是读取还是写入，所以在实际使用中会增加一个bit作为控制，实际使用中是8个bit地址。BH1750的通讯过程</p><p>首先我们看数据手册，可以发现BH1750的数据收发分为两个8bit合共16个bit的数据（不算ACK）。数据结构于英文文档之下表如下：</p><p>在实际使用中，Slave Address与R&#x2F;W数据可以一起传输，即7bit+1bit &#x3D; 8bit</p><p><img src="https://bu.dusays.com/2024/06/17/666fd52221aca.png" alt="BH1750之I2C数据结构"></p><p><img src="https://bu.dusays.com/2024/06/17/666fd8229e907.png" alt="以Continuously H模式为例"></p><p>传输路径跟其他I2C设备一样，发送Slave Address → 等ACK应答 → 发送Opecode数据 → 等ACK应答。</p><p><strong>第一步：发送上电指令 (0x01)</strong></p><p>假设ADDR为低电平，BH1750设备地址为0x23 + R0 &#x3D; 0x46。数据结构为：<code>0x46 WaitACK 0x01 WaitACK</code></p><p><strong>第二步：发送测量模式指令 (0x10)</strong></p><p>根据图片上和第一步的例子，我们假定ADDR低电平且采用连续H分辨率测量的模式(0x10)</p><p>数据结构为：<code>0x46 WaitACK 0x10 WaitAC</code></p><p><strong>第三步：等测量和读数据</strong></p><p>手册上对每个测量模式的时间有说，连续H分辨率需要的时间最长，平均为120ms，但是为了数据最新，最好是隔200ms读取一次。值得一提的是，寄存器数据不会清零，因此亦可以不延迟直接读取，只是有点误差。</p><p>现在，是读取模式，与之前的0x23 + R0 &#x3D; 0x46的地址不同，读取模式是0x23 + W1 &#x3D; 0x47的地址。</p><p>因此数据结构为：<code>0x47 WaitACK 读出的数据 WaitACK</code></p><p><strong>第四步：计算实际光照值</strong></p><p>前面读出来的值，显然的是BH1750内部传感器的值，并不是真实的光照强度值，根据手册，我们需要转换一下。</p><p><img src="https://bu.dusays.com/2024/06/17/666fda9d3449d.png" alt="Clip_2024-06-17_14-41-30"></p><p>H模式： 光照强度 &#x3D; <code>1 / 1.2 * (寄存器值[15:0] * 分辨率)</code>单位是lx</p><p>H2模式：光照强度 &#x3D; <code>1 / 1.2 * (寄存器值[15:0] * 分辨率) / 2</code>单位是lx</p><h1 id="BH1750的指令和测量模式"><a href="#BH1750的指令和测量模式" class="headerlink" title="BH1750的指令和测量模式"></a>BH1750的指令和测量模式</h1><h2 id="所有指令"><a href="#所有指令" class="headerlink" title="所有指令"></a>所有指令</h2><table><thead><tr><th>名称</th><th>地址</th><th>注释</th></tr></thead><tbody><tr><td>断电 Power Down</td><td>0000_0000</td><td>无激活状态 No active state.</td></tr><tr><td>上电 Power On</td><td>0000_0001</td><td>通电等待测量指令 Waiting for measurement command.</td></tr><tr><td>重置 Reset</td><td>0000_0111</td><td>重置寄存器的所有值 Reset Data register value. Reset command is not acceptable in Power Down mode.</td></tr><tr><td>连续H分辨率模式 Continuously H-Resolution Mode</td><td>0001_0000</td><td>在1lx分辨率下开始连续测量 Start measurement at 1lx resolution. Measurement Time is typically 120ms.</td></tr><tr><td>连续H分辨率模式2 Continuously H-Resolution Mode2</td><td>0001_0001</td><td>在0.5lx分辨率下开始连续测量 Start measurement at 0.5lx resolution. Measurement Time is typically 120ms.</td></tr><tr><td>连续L分辨率模式 Continuously L-Resolution Mode</td><td>0001_0011</td><td>在4lx分辨率下开始连续测量 Start measurement at 4lx resolution. Measurement Time is typically 16ms.</td></tr><tr><td>一次H分辨率模式 One Time H-Resolution Mode</td><td>0010_0000</td><td>在1lx分辨率下开始测量一次，完成后进入断电模式 Start measurement at 1lx resolution. Measurement Time is typically 120ms. It is automatically set to Power Down mode after measurement.</td></tr><tr><td>一次H分辨率模式2 One Time H-Resolution Mode2</td><td>0010_0001</td><td>在0.5lx分辨率下开始测量一次，完成后进入断电模式 Start measurement at 0.5lx resolution. Measurement Time is typically 120ms. It is automatically set to Power Down mode after measurement.</td></tr><tr><td>一次L分辨率模式 One Time L-Resolution Mode</td><td>0010_0011</td><td>在4lx分辨率下开始测量一次，完成后进入断电模式 Start measurement at 4lx resolution. Measurement Time is typically 16ms. It is automatically set to Power Down mode after measurement.</td></tr><tr><td>Change Measurement time ( High bit )</td><td>01000_MT[7,6,5]</td><td>Change measurement time. ※ Please refer “adjust measurement result for influence of optical window.”</td></tr><tr><td>Change Masurement time ( Low bit )</td><td>011_MT[4,3,2,1,0]</td><td>Change measurement time. ※ Please refer “adjust measurement result for influence of optical window.”</td></tr></tbody></table><h2 id="各类测量模式"><a href="#各类测量模式" class="headerlink" title="各类测量模式"></a>各类测量模式</h2><table><thead><tr><th>测量模式</th><th>精度</th><th>测量时间</th><th>注释</th></tr></thead><tbody><tr><td>一次H分辨率模式</td><td>1 lx</td><td>120ms</td><td>进行一次测量，测量完成后会切换到断电模式</td></tr><tr><td>一次H分辨率模式2</td><td>0.5 lx</td><td>120ms</td><td>进行一次测量，测量完成后会切换到断电模式</td></tr><tr><td>一次L分辨率模式</td><td>4 lx</td><td>16ms</td><td>进行一次测量，测量完成后会切换到断电模式</td></tr><tr><td>连续H分辨率模式</td><td>1 lx</td><td>120ms</td><td>会自动进行连续测量，无需重复配置</td></tr><tr><td>连续H分辨率模式2</td><td>0.5 lx</td><td>120ms</td><td>会自动进行连续测量，无需重复配置</td></tr><tr><td>连续L分辨率模式</td><td>4 lx</td><td>16ms</td><td>会自动进行连续测量，无需重复配置</td></tr></tbody></table><h1 id="编程和代码部分"><a href="#编程和代码部分" class="headerlink" title="编程和代码部分"></a>编程和代码部分</h1><p>下面的编程我以stm32为例，I2C和BH1750都是标准协议，其实换成其他单片机或者系统，程序也是基本一样的，不同的只是GPIO口的不同。</p><p>这边用的就还是软件模拟I2C的方式，没有用硬件I2C。</p><h2 id="1-头文件定义部分"><a href="#1-头文件定义部分" class="headerlink" title="1. 头文件定义部分"></a>1. 头文件定义部分</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __BH1750_H__</span><br><span class="line">#define __BH1750_H__</span><br><span class="line">#include &quot;stm32f10x.h&quot;</span><br><span class="line">#include &quot;Delay.h&quot;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * author: 御枫林下 on Tue, 28 May 2024</span><br><span class="line"> * brief: 宏定义GOIO引脚</span><br><span class="line"> * param: void</span><br><span class="line"> * return: void</span><br><span class="line"> **/</span><br><span class="line">#define BH1750_I2C_GPIO_Port GPIOB</span><br><span class="line">#define BH1750_I2C_SCL_GPIOPin GPIO_Pin_6</span><br><span class="line">#define BH1750_I2C_SDA_GPIOPin GPIO_Pin_7</span><br><span class="line">#define BH1750_I2C_SCL(x) GPIO_WriteBit(BH1750_I2C_GPIO_Port, BH1750_I2C_SCL_GPIOPin, (x))</span><br><span class="line">#define BH1750_I2C_SDA(x) GPIO_WriteBit(BH1750_I2C_GPIO_Port, BH1750_I2C_SDA_GPIOPin, (x))</span><br><span class="line">#define BH1750_I2C_SDARead() GPIO_ReadInputDataBit(BH1750_I2C_GPIO_Port, BH1750_I2C_SDA_GPIOPin)</span><br><span class="line">#define HIGH Bit_SET</span><br><span class="line">#define LOW Bit_RESET</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * author: 御枫林下 on Tue, 28 May 2024</span><br><span class="line"> * brief: 宏定义BH1750相关地址</span><br><span class="line"> **/</span><br><span class="line">#define BH1750_ADDRESS 0x46</span><br><span class="line">#define BH1750_CMD_AddWrite 0x46</span><br><span class="line">#define BH1750_CMD_AddRead 0x47</span><br><span class="line">#define BH1750_CMD_PowOn 0x01</span><br><span class="line">#define BH1750_CMD_ModeH1 0x10</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * author: 御枫林下 on Wed, 21 May 2024</span><br><span class="line"> * brief: 过滤需要用到的函数</span><br><span class="line"> * note: 不在此列的函数，无法在外部调用。为了保证函数在本体的可用性，在源文件内会重新定义一次。</span><br><span class="line"> **/</span><br><span class="line">void BH1750_Init(void);</span><br><span class="line">uint16_t BH1750_FluxValue(void);</span><br><span class="line">uint16_t BH1750_ReadData(void);</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h2 id="2-BH1750部分"><a href="#2-BH1750部分" class="headerlink" title="2. BH1750部分"></a>2. BH1750部分</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;BH1750.h&quot;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * author: 御枫林下 on Wed, 21 May 2024</span><br><span class="line"> * brief: 定义所有函数</span><br><span class="line"> **/</span><br><span class="line">static void BH1750_I2C_GPIOInit(void);</span><br><span class="line">void BH1750_I2C_Start(void);</span><br><span class="line">void BH1750_I2C_Stop(void);</span><br><span class="line">void BH1750_I2C_SendByte(uint8_t Byte);</span><br><span class="line">uint8_t BH1750_I2C_ReadByte(void);</span><br><span class="line">uint8_t BH1750_I2C_WaitAck(void);</span><br><span class="line">uint16_t BH1750_FluxValue(void);</span><br><span class="line">void BH1750_Init(void);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * author: 御枫林下 on Wed, 21 May 2024</span><br><span class="line"> * brief: GPIO初始化函数</span><br><span class="line"> * param: void</span><br><span class="line"> * return: void</span><br><span class="line"> **/</span><br><span class="line">static void BH1750_I2C_GPIOInit(void)</span><br><span class="line">&#123;</span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line"></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = BH1750_I2C_SCL_GPIOPin | BH1750_I2C_SDA_GPIOPin;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(BH1750_I2C_GPIO_Port, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">    BH1750_I2C_SDA(HIGH);</span><br><span class="line">    BH1750_I2C_SCL(HIGH);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void BH1750_I2C_Start(void)</span><br><span class="line">&#123;</span><br><span class="line">    BH1750_I2C_SDA(HIGH);</span><br><span class="line">    BH1750_I2C_SCL(HIGH);</span><br><span class="line">    Delay_us(10);</span><br><span class="line">    BH1750_I2C_SDA(LOW);</span><br><span class="line">    Delay_us(10);</span><br><span class="line">    BH1750_I2C_SCL(LOW);</span><br><span class="line">    Delay_us(10);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void BH1750_I2C_Stop(void)</span><br><span class="line">&#123;</span><br><span class="line">    BH1750_I2C_SCL(LOW);</span><br><span class="line">    BH1750_I2C_SDA(LOW);</span><br><span class="line">    Delay_us(10);</span><br><span class="line">    BH1750_I2C_SCL(HIGH);</span><br><span class="line">    Delay_us(10);</span><br><span class="line">    BH1750_I2C_SDA(HIGH);</span><br><span class="line">    Delay_us(10);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void BH1750_I2C_SendByte(uint8_t Byte)</span><br><span class="line">&#123;</span><br><span class="line">    for (uint8_t i = 0; i &lt; 8; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        BH1750_I2C_SDA(Byte &amp; (0x80 &gt;&gt; i) ? HIGH : LOW);</span><br><span class="line">        BH1750_I2C_SCL(HIGH);</span><br><span class="line">        Delay_us(10);</span><br><span class="line">        BH1750_I2C_SCL(LOW);</span><br><span class="line">        Delay_us(10);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uint8_t BH1750_I2C_ReadByte(void)</span><br><span class="line">&#123;</span><br><span class="line">    uint8_t byte = 0x00;</span><br><span class="line">    BH1750_I2C_SDA(HIGH);</span><br><span class="line">    Delay_us(10);</span><br><span class="line">    for (uint8_t i = 0; i &lt; 8; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        BH1750_I2C_SCL(HIGH);</span><br><span class="line">        Delay_us(10);</span><br><span class="line">        if (BH1750_I2C_SDARead())</span><br><span class="line">        &#123;</span><br><span class="line">            byte |= (0x80 &gt;&gt; i);</span><br><span class="line">        &#125;</span><br><span class="line">        BH1750_I2C_SCL(LOW);</span><br><span class="line">        Delay_us(10);</span><br><span class="line">    &#125;</span><br><span class="line">    return byte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uint8_t BH1750_I2C_WaitAck(void)</span><br><span class="line">&#123;</span><br><span class="line">    uint8_t AckTag = 0;</span><br><span class="line">    BH1750_I2C_SDA(HIGH);</span><br><span class="line">    BH1750_I2C_SCL(HIGH);</span><br><span class="line">    Delay_us(10);</span><br><span class="line">    if (BH1750_I2C_SDARead())</span><br><span class="line">    &#123;</span><br><span class="line">        AckTag = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    BH1750_I2C_SCL(LOW);</span><br><span class="line">    Delay_us(10);</span><br><span class="line">    return AckTag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void BH1750_I2C_SendAck(void)</span><br><span class="line">&#123;</span><br><span class="line">    BH1750_I2C_SDA(LOW);</span><br><span class="line">    Delay_us(10);</span><br><span class="line">    BH1750_I2C_SCL(HIGH);</span><br><span class="line">    Delay_us(10);</span><br><span class="line">    BH1750_I2C_SCL(LOW);</span><br><span class="line">    Delay_us(10);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void BH1750_I2C_SendNAck(void)</span><br><span class="line">&#123;</span><br><span class="line">    BH1750_I2C_SDA(HIGH);</span><br><span class="line">    Delay_us(10);</span><br><span class="line">    BH1750_I2C_SCL(HIGH);</span><br><span class="line">    Delay_us(10);</span><br><span class="line">    BH1750_I2C_SCL(LOW);</span><br><span class="line">    Delay_us(10);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uint8_t BH1750_SendData(uint8_t data)</span><br><span class="line">&#123;</span><br><span class="line">    BH1750_I2C_Start();</span><br><span class="line">    BH1750_I2C_SendByte(BH1750_CMD_AddWrite);</span><br><span class="line">    if (BH1750_I2C_WaitAck())</span><br><span class="line">    &#123;</span><br><span class="line">        BH1750_I2C_Stop();</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    BH1750_I2C_SendByte(data);</span><br><span class="line">    if (BH1750_I2C_WaitAck())</span><br><span class="line">    &#123;</span><br><span class="line">        BH1750_I2C_Stop();</span><br><span class="line">        return 2;</span><br><span class="line">    &#125;</span><br><span class="line">    BH1750_I2C_Stop();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uint16_t BH1750_ReadData(void)</span><br><span class="line">&#123;</span><br><span class="line">    uint8_t MSB, LSB;</span><br><span class="line">    BH1750_I2C_Start();</span><br><span class="line">    BH1750_I2C_SendByte(BH1750_CMD_AddRead);</span><br><span class="line">    if (BH1750_I2C_WaitAck())</span><br><span class="line">    &#123;</span><br><span class="line">        BH1750_I2C_Stop();</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    MSB = BH1750_I2C_ReadByte();</span><br><span class="line">    BH1750_I2C_SendAck();</span><br><span class="line">    LSB = BH1750_I2C_ReadByte();</span><br><span class="line">    BH1750_I2C_SendNAck();</span><br><span class="line">    BH1750_I2C_Stop();</span><br><span class="line">    return (MSB &lt;&lt; 8) | LSB;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * author: 御枫林下 on Wed, 21 May 2024</span><br><span class="line"> * brief: BH1750读取并转换光照值函数</span><br><span class="line"> * param: void</span><br><span class="line"> * return: float temp 返回Flux单位的光照值</span><br><span class="line"> * note: 需要先调用BH1750_Init()函数初始化整个BH1750后，才能调用.</span><br><span class="line"> **/</span><br><span class="line">uint16_t BH1750_FluxValue(void)</span><br><span class="line">&#123;</span><br><span class="line">    uint16_t temp = 0;</span><br><span class="line">    uint16_t raw_data = BH1750_ReadData();</span><br><span class="line">    temp = raw_data / 1.2;</span><br><span class="line">    return temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void BH1750_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">    BH1750_I2C_GPIOInit();</span><br><span class="line">    BH1750_SendData(BH1750_CMD_PowOn);</span><br><span class="line">    BH1750_SendData(BH1750_CMD_ModeH1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Delay函数"><a href="#3-Delay函数" class="headerlink" title="3. Delay函数"></a>3. Delay函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;Delay.h&quot;</span><br><span class="line">/**</span><br><span class="line">  * @brief  微秒级延时</span><br><span class="line">  * @param  xus 延时时长，范围：0~233015</span><br><span class="line">  * @retval 无</span><br><span class="line">  */</span><br><span class="line">void Delay_us(uint32_t xus)</span><br><span class="line">&#123;</span><br><span class="line">SysTick-&gt;LOAD = 72 * xus;//设置定时器重装值</span><br><span class="line">SysTick-&gt;VAL = 0x00;//清空当前计数值</span><br><span class="line">SysTick-&gt;CTRL = 0x00000005;//设置时钟源为HCLK，启动定时器</span><br><span class="line">while(!(SysTick-&gt;CTRL &amp; 0x00010000));//等待计数到0</span><br><span class="line">SysTick-&gt;CTRL = 0x00000004;//关闭定时器</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  * @brief  毫秒级延时</span><br><span class="line">  * @param  xms 延时时长，范围：0~4294967295</span><br><span class="line">  * @retval 无</span><br><span class="line">  */</span><br><span class="line">void Delay_ms(uint32_t xms)</span><br><span class="line">&#123;</span><br><span class="line">while(xms--)</span><br><span class="line">&#123;</span><br><span class="line">Delay_us(1000);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line">  * @brief  秒级延时</span><br><span class="line">  * @param  xs 延时时长，范围：0~4294967295</span><br><span class="line">  * @retval 无</span><br><span class="line">  */</span><br><span class="line">void Delay_s(uint32_t xs)</span><br><span class="line">&#123;</span><br><span class="line">while(xs--)</span><br><span class="line">&#123;</span><br><span class="line">Delay_ms(1000);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="4-主函数"><a href="#4-主函数" class="headerlink" title="4. 主函数"></a>4. 主函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stm32f10x.h&quot; // Device header</span><br><span class="line">#include &quot;USART1.h&quot;</span><br><span class="line">#include &quot;BH1750.h&quot;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">USART1_Init();</span><br><span class="line">    BH1750_Init();</span><br><span class="line">    </span><br><span class="line">    while(1)</span><br><span class="line">    &#123;</span><br><span class="line">        USART1_Printf(&quot;BH1750: %d  \r&quot;, BH1750_FluxValue());</span><br><span class="line">        Delay_ms(500);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>读取的时候直接调用<code>BH1750_FluxValue()</code>函数即可以直接读取出数值。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在写比赛的文档的时候，写到了BH1750的参数之类的，于是想着想都想了，不如写下来玩玩。&lt;br&gt;emmmm，这边用的是STM32F103C8T6的芯片的标准库，其他MCU也大同小异，如果是用hal库就更好了，无需管GPIO口初始化那堆零碎的事情了。&lt;/p&gt;
&lt;h1 id</summary>
      
    
    
    
    <category term="芯途漫记" scheme="https://agen233.top/categories/%E8%8A%AF%E9%80%94%E6%BC%AB%E8%AE%B0/"/>
    
    
    <category term="I2C" scheme="https://agen233.top/tags/I2C/"/>
    
  </entry>
  
  <entry>
    <title>揪出Windows上阻止你屏幕自动睡眠的程序</title>
    <link href="https://agen233.top/posts/3087054e/"/>
    <id>https://agen233.top/posts/3087054e/</id>
    <published>2024-05-23T00:59:31.000Z</published>
    <updated>2025-05-18T15:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨晚开着电脑听歌的时候，突然发现过了两个小时还不会熄屏，这就奇了怪了，因为我的电脑是设置了3分钟熄屏的。</p><p>而 Win32API  Winbase.h里面的<strong>SetThreadExecutionState</strong>可以使得屏幕关闭和阻止系统休眠，而这本身是静默的，Windows并没有在前端提示是由谁造成的，于是就特别难蚌（</p><p>折腾了一圈也是发现有两种方式可以把阻止休眠的程序找出来。</p><h1 id="方法一、命令行方式"><a href="#方法一、命令行方式" class="headerlink" title="方法一、命令行方式"></a>方法一、命令行方式</h1><p>在管理员终端中，使用命令<code>powercfg /requests</code></p><p><code>requests</code> 参数的作用是‎“列举应用程序和驱动程序的电源请求。电源API可防止计算机自动关闭显示屏或进入低功耗睡眠模式。</p><blockquote><p>Enumerates application and driver Power Requests. Power Requests prevent the computer from automatically powering off the display or entering a  low-power sleep mode.</p></blockquote><p>于是乎，如果有某个程序或者驱动设置了屏幕关闭或者禁止休眠，就会在下面显示。</p><p><img src="https://bu.dusays.com/2024/06/12/6669abc345336.png" alt="PixPin_2024-05-20_00-56-26.png"></p><p>6，我这里是QQ音乐导致的，按照常理来说，这种音乐类软件组织休眠是正常的，但不应该阻止熄屏啊……</p><h1 id="方法二、事件跟踪器"><a href="#方法二、事件跟踪器" class="headerlink" title="方法二、事件跟踪器"></a>方法二、事件跟踪器</h1><p>有的软件他的实现方式比较鸡贼？或者说比较不遵守规范？抑或是方法比较暴力。总之，他们不是用正常的API方法实现不熄屏，而是用不停的重置睡眠计时器的方式去实现的，那么，他既然不是调用<strong>SetThreadExecutionState</strong>，那么方法一的指令自然没办法找到他们，那么就要用事件跟踪器去找。</p><p>还是管理员终端，输入<code>powercfg -energy -trace</code></p><p>用了这个命令之后要等60秒，而且不要碰电脑，不然鼠标键盘操作也会被记录进去，就会多了一些“没用”的东西。</p><p>出现跟踪完成之后呢，就完事了。</p><p>要注意！他生成的内容在你当前终端路径之下，比如我现在是<code>C&quot;\Users\AGEN233</code>那么文件在这个路径下，如果你是<strong>管理员:命令提示符</strong>那么就是在对应的<code>C:\Windows\System32</code>下</p><p><img src="https://bu.dusays.com/2024/06/12/6669abc308088.png" alt="Clip_2024-05-20_01-28-57.png"></p><p>然后我们打开<strong>事件查看器</strong>，Win + R，输入<code>eventvwr</code></p><p>然后顶部菜单栏，<code>操作 → 导入自定义视图</code>选择刚刚导出来的文件。</p><p><img src="https://bu.dusays.com/2024/06/12/6669abc3a1589.png" alt="Clip_2024-05-20_01-38-21-1716140314674-6.png"></p><p>但是打开之后会发现日志太多了，很麻烦</p><p>选中<strong>energy-trace</strong>右键<strong>筛选当前日志</strong>，事件来源<strong>Kernel-Power</strong>，ID是<strong>63</strong></p><p><img src="https://bu.dusays.com/2024/06/12/6669abc43cfcf.png" alt="Clip_2024-05-20_01-38-21-1716140314674-6.png"></p><p>然后你要找**The application or service 0x0 is attempting to update the system timer resolution to a value of 0x0.**点击详细之后可以看到是那个程序。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;昨晚开着电脑听歌的时候，突然发现过了两个小时还不会熄屏，这就奇了怪了，因为我的电脑是设置了3分钟熄屏的。&lt;/p&gt;
&lt;p&gt;而 Win32API  Winbase.h里面的&lt;strong&gt;SetThreadExecutionState&lt;/strong&gt;可以使得屏幕关闭和阻止系统</summary>
      
    
    
    
    
    <category term="Windows" scheme="https://agen233.top/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>“送去大学的外卖基本没有差评”</title>
    <link href="https://agen233.top/posts/66b5bdfd/"/>
    <id>https://agen233.top/posts/66b5bdfd/</id>
    <published>2024-05-15T00:53:05.000Z</published>
    <updated>2025-05-18T15:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>虽然我平时点外卖并不多（基本不是在校内买就是直接出去吃），但回想一下自己点外卖的时候，似乎一直是对外卖小哥抱着 “理解”“体谅” 的态度</p><p>我想，只是因为能上到大学的学生所接触的基础教育是具备正确价值观的，而不是计较、抠门、刁难、无理取闹</p></blockquote><p>嘛，也是大半夜无聊刷博客看到了港港写的<a href="https://blog.starsharbor.com/takeaway/">“送去大学的外卖基本没有差评”</a>而我之前暑假的时候也去送了一波外卖，有感而发（</p><p>与此同时，我个人也是进场点外卖，于是想本着两个角度和两个立场的角度，来聊聊。</p><h1 id="顾客"><a href="#顾客" class="headerlink" title="顾客"></a>顾客</h1><p>我几乎天天点外卖了（<del>才不是因为学校的难吃</del>），确实跟Starsharbor说的一样，几乎每次点外卖都似乎一直是“理解”和“体谅”的态度，几乎从来没有催过单和与小哥发生矛盾。</p><p>迟点就迟点，能吃上就好了，我又不缺这十几分钟，又不会饿死，为什么要跟别人吵？</p><p>别人也是打份工，急什么？我闲的没事干嘛？为什么要投诉？</p><p>商家出餐慢、堵车、找不到人，都会把原本就并不充裕的送餐时间越拖越慢，这是不可避免的。</p><p>只要不是态度恶劣，我不想、他们也并不应该去承担别人的失误，亦不应该为别人的错误买单。</p><p>即便是骑手的问题（上厕所、休息），只要不是态度恶劣，这又如何？谁能保证上班的时候不摸鱼？谁能保证上班不出问题？</p><p>我认为，只要上过基础教育且具备正确价值观，且那天不是心情不好的情况下，都不会为了晚几分钟这种鸡毛蒜皮的小事情而去整蛊作怪</p><blockquote><p>我想，只是因为能上到大学的学生所接触的基础教育是具备正确价值观的，而不是计较、抠门、刁难、无理取闹</p></blockquote><h1 id="外卖小哥"><a href="#外卖小哥" class="headerlink" title="外卖小哥"></a>外卖小哥</h1><p>嘛，也是在23年（大一）的暑假的时候，因为闲的没事干，去跑了一个半月外卖，捞了几千块钱。<span><img src='https://bu.dusays.com/2021/01/15/654a51ee35e02.png' style='height:24px'></span></p><p>确实啊，其实无论是大学还是高中之类的对时间要求比较严格的学校，可以说几乎（甚至全部）没有差评，事情和需要耗费的精力也是最少的。</p><p>之前一直以为人的素质都有那么上下，直到出来送外卖，才发现社会上的人的素质真的是鱼龙混杂，有洒了也无所谓的、也有满两分钟（但没超时）就在大吵大叫的，也有自己地址定位不对还说爱送不送的。</p><p>当然，外卖骑手本身的素质其实也是鱼龙混杂，有的素质高<del>颜值还高</del>的小哥哥、也有为了生活奔波的中年男子，还有一些横冲直撞的高中生（</p><p>其实顾客跟骑手吵架没有任何意义，专送说是规则多而且犯人，但实际上有很多免责的方法和bug可以卡。比如说可以故意诱引或者气顾客让他自己说出“我不要了”，那接下来的责任就和骑手没关系了；再比如，可以用商家出餐慢的名头去无限延长送餐时间之类的。总之，只要思想滑坡，方法总比困难多（</p><p>最颠公的是，凌晨两点钟跑来这种一点灯都没得地方，破系统派单也是离谱的一批</p><p><img src="https://bu.dusays.com/2024/06/12/6669abb1a61f4.webp" alt="wx_camera_1691512810217.webp"></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p><em><strong>美团专送，狗都不去</strong></em></p><p><em><strong>美团外卖，狗都不点</strong></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;虽然我平时点外卖并不多（基本不是在校内买就是直接出去吃），但回想一下自己点外卖的时候，似乎一直是对外卖小哥抱着 “理解”“体谅” 的态度&lt;/p&gt;
&lt;p&gt;我想，只是因为能上到大学的学生所接触的基础教育是具备正确价值观的，而不是计较、抠门、刁难、无理取</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我们那丢人又幸福的不完美的人生 | 米奇与达利</title>
    <link href="https://agen233.top/posts/4dc3a1af/"/>
    <id>https://agen233.top/posts/4dc3a1af/</id>
    <published>2024-05-07T16:17:59.000Z</published>
    <updated>2025-05-18T15:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>一开始是闲的没事干，然后想找点乐子，顺便因为是双男主比较喜欢看小正太才看的。看了之后才发现不是那么一回事，根本不是所谓的乐子片。天知道我最后一集哭了多少次（（（</p><img src="https://bu.dusays.com/2024/06/12/6669abc7ab83f.png" alt="Clip_2024-05-07_16-27-57"  /><p>***又颠又好看！***当最后礼物出现的时候，我绷不住了，养父母也太好了！米奇和达利终于能得到幸福并能独立追寻自己的人生了。从一开始只是为了复仇而装的一摸一样，从两者一体到最后发现他们之间有那么多不同的地方。暂且不谈颠公般的过程不同，从结果而言，他们不只是发现了真相并报复，而且还得到了真正的救赎。两个人坦然地走向了不同的道路，可他们的心永不分离。</p><p>这真的是一部好优秀好厉害的作品，故事中的所有人都被给予了最大善意，合乎情节发展的同时深深触动了人心，给足了观众心灵治愈；而再令人唾弃的坏人，也总有一个人在心中给你留有一席之地。</p><p>这可能就是所谓的不完美，但又幸福的人生吧……</p><p>诚然，每个人都想要幸福而完美的人生，但是幸福不是一场如愿的复仇，相反，它有时候可能只是一个普通的樱桃派；这世界上每个人都有选择幸福完美的权利，而幸福和完美本身不应被定义，因为不是条条框框，更不是束缚人的工具。相反，那些得不到幸福的人才是被自己的”幸福”所框住了。</p><p>最后达利在火灾中留下了脸上的伤疤，他原本想做一辈子米奇的影子，但是他们两人终究不同，与此同时，养父母早就察觉出他们的不同，并主动温柔地接纳了他们。</p><p><strong>他们方向不同，但他们又不一而同地走向了相同的幸福人生 。</strong></p><p><img src="https://bu.dusays.com/2024/06/12/6669abc96a26a.gif" alt="PixPin_2024-05-07_16-36-34-min"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一开始是闲的没事干，然后想找点乐子，顺便因为是双男主比较喜欢看小正太才看的。看了之后才发现不是那么一回事，根本不是所谓的乐子片。天知道我最后一集哭了多少次（（（&lt;/p&gt;
&lt;img src=&quot;https://bu.dusays.com/2024/06/12/6669abc7a</summary>
      
    
    
    
    <category term="次元记" scheme="https://agen233.top/categories/%E6%AC%A1%E5%85%83%E8%AE%B0/"/>
    
    
    <category term="米奇与达利" scheme="https://agen233.top/tags/%E7%B1%B3%E5%A5%87%E4%B8%8E%E8%BE%BE%E5%88%A9/"/>
    
  </entry>
  
  <entry>
    <title>关于algolia自动上传</title>
    <link href="https://agen233.top/posts/e4d8f98b/"/>
    <id>https://agen233.top/posts/e4d8f98b/</id>
    <published>2024-05-03T23:47:29.000Z</published>
    <updated>2025-05-18T15:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>跟着教程把algolia搞出来了，但是发现每次修改完三连上传的时候，都不会自动更新algolia的index，必须手动hexo algolia一下，虽说问题不大，但是相当不优雅。</p><p>一开始是想着修改下能不能hexo deploy的时候一并上传，但是发现方向错了。</p><p>在翻了一波官方文档后, 发现我们执行的<code>hexo d</code>实质上依赖于<code>package.json</code>去转接执行。</p><blockquote><p>应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> 渲染引擎 已默认安装，您可以自由移除。 – <a href="https://hexo.io/zh-cn/docs/setup">hexo官网</a></p></blockquote><p>于是正确的方向是在直行<code>hexo d</code>的时候不是只是执行<code>hexo delay</code>而是一并执行<code>hexo algolia</code></p><p>通过修改<code>package.json</code>文件即可实现。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo generate&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;clean&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo deploy &amp;&amp; hexo algolia&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo server&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>同理，我们可以干脆把<strong>clean</strong>和<strong>generate</strong>一并添加进去，就可以实现hexo d完成所有功能</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo generate&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;clean&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy &amp;&amp; hexo algolia&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo server&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;跟着教程把algolia搞出来了，但是发现每次修改完三连上传的时候，都不会自动更新algolia的index，必须手动hexo algolia一下，虽说问题不大，但是相当不优雅。&lt;/p&gt;
&lt;p&gt;一开始是想着修改下能不能hexo deploy的时候一并上传，但是发现方向错了。</summary>
      
    
    
    
    <category term="技研笔记" scheme="https://agen233.top/categories/%E6%8A%80%E7%A0%94%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="博客" scheme="https://agen233.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Keil5烧录报错Connection refused due to device mismatch的玄学问题</title>
    <link href="https://agen233.top/posts/8884a040/"/>
    <id>https://agen233.top/posts/8884a040/</id>
    <published>2024-04-18T20:42:00.000Z</published>
    <updated>2025-05-18T15:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前上课的时候，老师要求把指定的固件刷到开发版里面，但奇怪的是，有的板子可以刷入，有的不行，有的电脑可以，有的却不行。按理说工程文件、STLink驱动、开发版都是一样的，不应该存在这种问题才对。于是Google了一轮，记录一下。</p><h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><p><img src="https://bu.dusays.com/2024/06/12/6669abb3a729f.png" alt="image-20240418205822581"></p><p><img src="https://bu.dusays.com/2024/06/12/6669abb3ca1db.png" alt="image-20240418205833767"></p><p>双连报错，很明显：</p><ul><li><strong>芯片不对</strong></li><li><strong>程序下载错误</strong></li></ul><h2 id="芯片不对？"><a href="#芯片不对？" class="headerlink" title="芯片不对？"></a>芯片不对？</h2><p>不可能，工程文件是开发版厂家提供的，板子上的芯片也确实是<strong>STM32F103RCT6</strong>，这和Keil上是一一对应的，应该不存在芯片不对的问题。</p><p><img src="https://bu.dusays.com/2024/06/12/6669abb6179ef.jpg" alt="result"></p><p><strong>但错误信息都无限制的指向这一个问题——芯片错误，这就奇了怪了</strong></p><h2 id="芯片问题？？？？？？"><a href="#芯片问题？？？？？？" class="headerlink" title="芯片问题？？？？？？"></a>芯片问题？？？？？？</h2><p>根据论坛大佬和群友提供的信息，STLINK烧录的时候，首先需要和芯片建立连接，而校验芯片是否正确，则是用<strong>IDCODE</strong>进行校验。</p><p>STM32F103系列的IDCODE是<strong>0x1B10477</strong>，而我手上的是<strong>0x2BA01477</strong>，换句话说，我手上的这个芯片是仿制的，并非原版的</p><p><img src="https://bu.dusays.com/2024/06/12/6669abb45df88.png" alt="image-20240418213335664"></p><p>但是参考大佬的文章<a href="https://blog.csdn.net/chunquqiulailll/article/details/113257923">keil5 报错 Connection refused due to device mismatch! 的原因以及解决办法-CSDN博客</a>是把CS的pack包替换一下就行了，但我这里pack并不安装的上，这就比较玄学了</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>最后发现，直接在<strong>Debug Description</strong>中，取消勾选ENABLE使能就能顺利写入了，之前为了CS的pack包折腾了很久都装不上，本以为是无解的问题，取消ENABLE就解决了（gg</p><p>个人估计可能还是玄学问题？或者是下载器的问题？但是我换了下载器后仍然下载不进。但按理说这个板子是学校统一采购的，应该不会使用仿制芯片才对，但是另一块ST官方的学习板又确实能把这个工程文件写进去，<strong>emmm，总之挺玄学的。</strong></p><p><strong>至少上课的时候是能写入工程文件了，就是还没试过DEBUG，不知道怎么样</strong></p><p><img src="https://bu.dusays.com/2024/06/12/6669abb41f677.png" alt="image-20240418214042902"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前上课的时候，老师要求把指定的固件刷到开发版里面，但奇怪的是，有的板子可以刷入，有的不行，有的电脑可以，有的却不行。按理说工程文件、STLink驱动、开发版都是一样的，不应该存在这种问题才对。于是Google了一轮，记录一下。&lt;/p&gt;
&lt;h2 id=&quot;报错信息&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="芯途漫记" scheme="https://agen233.top/categories/%E8%8A%AF%E9%80%94%E6%BC%AB%E8%AE%B0/"/>
    
    
    <category term="STM32" scheme="https://agen233.top/tags/STM32/"/>
    
    <category term="PHY6252" scheme="https://agen233.top/tags/PHY6252/"/>
    
  </entry>
  
  <entry>
    <title>在Win10及Win11下开启蓝牙耳机的LADC和aptXHD高质量音频协议</title>
    <link href="https://agen233.top/posts/5335a18c/"/>
    <id>https://agen233.top/posts/5335a18c/</id>
    <published>2024-04-17T01:05:19.000Z</published>
    <updated>2025-05-18T15:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前说到，通过偷渡到国际版的方法，成功开启了RB4P的LDAC模式。但是Win10仍然只支持低质量的SBC，而Win11也只是只支持48Khz的AAC，更不提LDAC这些高品质音频协议。但是经过我的一番Google和Gihub之后，发现了一个好东西《<a href="https://www.tjsky.net/goto/?url=https://www.bluetoothgoodies.com/a2dp/">Alternative A2DP Driver</a>》可以通过这个第三方的蓝牙音频驱动，让Win10和Win11支持LDAC和aptXHD，并且可以选择更高的采样频率或编码质量。</p><p>网上有个观点是AAC之后感知不强，emmmm这点我觉得还是得看个人感受和耳朵敏感度，如果你的蓝牙耳机不是特别拉胯，那从SBC换成LDAC或者是aptXHD感知还是相当明显的，</p><h1 id="Alternative-A2DP-Driver介绍和安装"><a href="#Alternative-A2DP-Driver介绍和安装" class="headerlink" title="Alternative A2DP Driver介绍和安装"></a>Alternative A2DP Driver介绍和安装</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>总所周知LDAC编解码完全通过软件实现，是完全意义的软件编码器，只需要支持蓝牙EDR（满足带宽要求）即可</p><blockquote><ul><li>LDAC is compatible with a wide range of devices, because LDAC is a software codec.</li></ul></blockquote><p><strong>Alternative A2DP Driver</strong>本质上是个第三方驱动，旨在通过代替Windows系统默认的A2DP驱动，从而支持更多的音频编码，并且可以让你调节更多的参数，进而提升蓝牙音频体验</p><div class="note warning"><i class="solitude flat"></i><p>注意，软件是付费软件，如果喜欢请购买正版，注意留意版权问题<br><a href="https://www.bluetoothgoodies.com/a2dp/purchase/?licensed_software=Alternative%20A2DP%20Driver%20Version">购买Alternative A2DP Driver许可证</a></p></div><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><ul><li><p>软件方面仅支持</p><ul><li>Windows10  1903以上</li><li>Windows11  21H2以上</li><li>且仅支持64位操作系统（现在应该已经很少人用32位了吧）</li></ul></li><li><p>硬件方面</p><ul><li><p>需要蓝牙适配器支持EDR，以满足速度要求。</p><p>EDR自蓝牙2.0开始使用，实装已经接近20年了，理论上现代的蓝牙适配器和基于无线网卡的蓝牙适配器都支持了。</p></li></ul></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p><a href="https://www.tjsky.net/goto/?url=https://www.bluetoothgoodies.com/a2dp/download/">Alternative A2DP Driver</a></p></li><li><p>无脑下一步，完成安装（软件会安装驱动，要注意杀毒软件和防火墙要放行）</p></li><li><p>打开软件，在软件的左侧选择要设置的设备，在右侧选择Alternative A2DP Driver</p><p><img src="https://bu.dusays.com/2024/06/12/6669abdcdbb35.png" alt="image-20240417205010033"></p></li><li><p>点击安装，同意UAC提权，等待安装成功</p></li><li><p>调节好参数，重新连接耳机</p></li><li><p>尽情享受高品质音乐！</p></li></ol><h1 id="参数调整"><a href="#参数调整" class="headerlink" title="参数调整"></a>参数调整</h1><p>这些参数都是基于我的日常使用得出来的结论，仅供参考，具体音质表现和稳定与否，取决于蓝牙耳机、蓝牙N电环境和蓝牙适配器本身</p><ul><li><p>编码器：LDAC</p></li><li><p>声道模式：立体声</p></li><li><p>采样率：96khz</p></li><li><p>分辨率：24位</p></li><li><p>立体声模式：Store</p></li><li><p>编码质量：HQ（高）</p></li><li><p>√无线电质量差时自动降低编码质量</p></li></ul><p>注意，如果不勾选自动降低编码质量，会发现设备在双联双LDAC的时候声音异常的很卡，断断续续的，勾选上自动降低的时候后，在双联的时候会自动降低码率，保证连接质量稳定而不卡</p><p><img src="https://bu.dusays.com/2024/06/12/6669abdd49498.png" alt="image-20240417231610315"></p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><h2 id="关于破解版"><a href="#关于破解版" class="headerlink" title="关于破解版"></a>关于破解版</h2><p>我本人是强烈反对使用盗版软件的，但是你确实囊中羞涩的话，他是个常见的倒计时试用制的软件，有的软件可以修改时间错，让Alternative A2DP Driver一直认为你在试用期，但bug是肯定有的，至于具体的，那你试一下就知道了（</p><p><img src="https://bu.dusays.com/2024/06/12/6669abdceb43e.webp" alt="PixPin2024-04-1821-56-51-imageonline.co-3437699"></p><h2 id="是否值得买"><a href="#是否值得买" class="headerlink" title="是否值得买"></a>是否值得买</h2><ul><li><p>如果你是win11，win11原生支持AAC和LC3，而你又觉得AAC和LC3够用了不需要LDAC，那我的建议是不用买</p></li><li><p>如果你是Win10，由于Win10只支持SBC，而你用蓝牙耳机特别多且耳机支持LDAC，我的建议是购买普通版，但如果你的耳机不支持LDAC只支持AAC，那只能买8.99美刀的版本。</p></li><li><p>如果你是Win8.1以下或者Win10 1155之类的这个软件不支持的版本，那可定是不用买的，没意义。</p></li></ul><h2 id="两种许可证有什么区别"><a href="#两种许可证有什么区别" class="headerlink" title="两种许可证有什么区别"></a>两种许可证有什么区别</h2><p>这个软件购买的时候有两种许可证，一种是带AAC编码器的，一种不带，由于AAC编码器是Via Licensing的专利付费编码器，所以如果使用AAC就必须向Via Licensing支付费用。如果你是Win11原生支持AAC，或者使用Win10但耳机都支持LDAC等更高哦质量的编码器而不需要AAC，那则可以不买AAC的许可。</p><h2 id="为什么我的耳机连接很不稳定、声音断断续续的"><a href="#为什么我的耳机连接很不稳定、声音断断续续的" class="headerlink" title="为什么我的耳机连接很不稳定、声音断断续续的"></a>为什么我的耳机连接很不稳定、声音断断续续的</h2><p>蓝牙高码率需要非常干净的无线电环境，而LDAC的990kbps几乎已经榨干了，所以为了蓝牙稳定性，建议勾选<strong>无线电质量差时自动降低编码质量</strong>以提升连接质量和稳定性。</p><h2 id="为什么我的耳机打不开LDAC？"><a href="#为什么我的耳机打不开LDAC？" class="headerlink" title="为什么我的耳机打不开LDAC？"></a>为什么我的耳机打不开LDAC？</h2><ul><li>如果你的耳机支持LDAC，但是软件内LDAC不可选，可能是因为耳机处于非LDAC或者叫重连接质量、低功耗、连接稳定性优先（类似的）模式，此时耳机可能为了各种目的而关闭LDAC，你需要把耳机改成音质有限之类的。</li><li>有的耳机在设备双联之下，为了保持连接稳定性，会禁用LDAC。有的耳机的LDAC还可能是付费的增值服务。</li></ul><h2 id="即便打开了LDAC码率也不高？"><a href="#即便打开了LDAC码率也不高？" class="headerlink" title="即便打开了LDAC码率也不高？"></a>即便打开了LDAC码率也不高？</h2><ul><li>在开了无线电质量差时自动降低编码质量的情况下，可能由于蓝牙信号环境不足以支撑高码率音频，驱动程序会从驱动层面主动降低码率。</li><li>有的耳机开启了设备双联且双LDAC后，为了保证连接质量，会从耳机端主动降低码率。</li></ul><p>如果你非要开启高码率，可以关闭<strong>无线电质量差时自动降低编码质量</strong>并手动选择SQ（高），这样则会锁死990kbps但是这样一来连接稳定性没法保证，二来可能会出现音频卡顿，再者还可能会出现失真。</p><h2 id="如果我主要使用LE-Audio（LC3）那我有必要买吗"><a href="#如果我主要使用LE-Audio（LC3）那我有必要买吗" class="headerlink" title="如果我主要使用LE Audio（LC3）那我有必要买吗"></a>如果我主要使用LE Audio（LC3）那我有必要买吗</h2><p>Win11已经全面支持LE Audio，所以如果你用Win11，则没必要买。</p><p>如果你用Win10，由于LE Audio和广泛使用的Classic Audio处于不相同的协议栈，而Alternative A2DP Driver不能也没有计划在A2DP中对LE Aduio</p><blockquote><p>截至 2023 年 6 月，Windows 11 已经支持 LE Audio。对于 Windows 10，添加对 LE Audio 的支持需要更换整个蓝牙堆栈，这是一项艰巨而危险的任务。</p><p>因此，没有计划在替代 A2DP 驱动程序中对 LE Audio 执行任何操作。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前说到，通过偷渡到国际版的方法，成功开启了RB4P的LDAC模式。但是Win10仍然只支持低质量的SBC，而Win11也只是只支持48Khz的AAC，更不提LDAC这些高品质音频协议。但是经过我的一番Google和Gihub之后，发现了一个好东西《&lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="技研笔记" scheme="https://agen233.top/categories/%E6%8A%80%E7%A0%94%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Windows" scheme="https://agen233.top/tags/Windows/"/>
    
    <category term="耳机" scheme="https://agen233.top/tags/%E8%80%B3%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>关于abbrlink和asset-image不兼容问题</title>
    <link href="https://agen233.top/posts/df9fba50/"/>
    <id>https://agen233.top/posts/df9fba50/</id>
    <published>2024-04-13T22:26:59.000Z</published>
    <updated>2025-05-18T15:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在把博客主题从butterfly换成安知鱼的时候，发现本地图片全部挂了，后来得知是两个插件不兼容，记录一下处理的方式，新版本应该已经做了适配了，所以本文没有多少参考意义了（</p><p><strong>hexo-abbrlink</strong>：给每篇文章生成十六进制的非中文路径</p><p><strong>hexo-asset-image</strong>：给图片添加一个绝对路径</p><p>当<strong>hexo-abbrlink</strong>和<strong>hexo-asset-image</strong>一起用的时候，无论怎么修改生成路径，要么封面加载不出来，要么文章内图片加载不出来，所以需要修改下面的文件，才能解决。</p><p><code> Your Blog Root\node_modules\hexo-asset-image\index.js</code></p><ol><li><p>在12行<code>var link = data.permalink;</code> 的下一行添加<code> var abbrlink = data.abbrlink</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.<span class="property">config</span>;</span><br><span class="line">  <span class="keyword">if</span>(config.<span class="property">post_asset_folder</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> link = data.<span class="property">permalink</span>;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="keyword">var</span> abbrlink = data.<span class="property">abbrlink</span> <span class="comment">// 添加：适配abbrlink</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> appendLink = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">    <span class="comment">// if not with index.html endpos = link.lastIndexOf(&#x27;.&#x27;) + 1 support hexo-abbrlink</span></span><br></pre></td></tr></table></figure></li><li><p>在60行附近<code>$(this).attr(&#39;src&#39;, config.root + link + src);</code>的这一行修改为<code> $(this).attr(&#39;src&#39;, config.root + &#39;posts/&#39; + abbrlink + &#39;/&#39; + src); //适配abbrlink</code></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$(this).attr(&#x27;src&#x27;, config.root + link + src);</span></span><br><span class="line">         $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, config.<span class="property">root</span> + <span class="string">&#x27;posts/&#x27;</span> + abbrlink + <span class="string">&#x27;/&#x27;</span> + src); <span class="comment">//适配abbrlink</span></span><br><span class="line">         <span class="comment">//</span></span><br></pre></td></tr></table></figure></li><li><p>三连即可</p></li></ol><p>参考链接:</p><p><a href="https://github.com/rozbo/hexo-abbrlink/issues/19">非常感谢作者，但是当有图片存在时，有bug · Issue #19 · rozbo&#x2F;hexo-abbrlink (github.com)</a></p><p><a href="https://blog.csdn.net/zino00/article/details/122730090">使用hexo-abbrlink及解决与hexo-asset-image不适配的问题_hexo-assert-image导致js文件被替换-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前在把博客主题从butterfly换成安知鱼的时候，发现本地图片全部挂了，后来得知是两个插件不兼容，记录一下处理的方式，新版本应该已经做了适配了，所以本文没有多少参考意义了（&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;hexo-abbrlink&lt;/strong&gt;：给每篇文章生成十六进</summary>
      
    
    
    
    <category term="技研笔记" scheme="https://agen233.top/categories/%E6%8A%80%E7%A0%94%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="博客" scheme="https://agen233.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>非小米电脑安装小米电脑管家</title>
    <link href="https://agen233.top/posts/6680ffdf/"/>
    <id>https://agen233.top/posts/6680ffdf/</id>
    <published>2024-02-27T13:40:37.000Z</published>
    <updated>2025-05-18T16:14:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>小米电脑管家是一款专为小米笔记本用户设计的电脑管理软件，是小米HyperConnect生态的重要一环。它提供了一系列强大的功能，包括驱动管理、硬件信息、设备互联等。其内置了小米的HyperConnect跨端智联功能。</p><p>如果你是小米手机用户的话，那么非常建议你安装！因为他能给你完整的智慧互联。本期，将以非小米电脑用户的视角，安装最新的完整版小米电脑管家</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><div class="note no-icon no-icon"><p>资源获取地址</p><ol><li><a href="https://hyperos.mi.com/continuity">小米电脑管家(官方)</a></li><li><a href="https://wwi.lanzoup.com/ibFjq1pitt6j">小米电脑管家插件</a></li></ol></div><h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><ol><li><p>把<strong>插件</strong>跟<strong>安装包</strong>放在同一文件夹内，然后打开安装包安装<strong>小米电脑管家</strong><img src="https://bu.dusays.com/2024/06/12/6669abbe4606a.webp" alt="1709012396002.webp"></p></li><li><p>安装完成后把补丁包放在<code>C:\Program Files\MI\XiaomiPCManager\具体版本\</code>，防止出现意外BUG</p></li></ol><h1 id="非完整体验"><a href="#非完整体验" class="headerlink" title="非完整体验"></a>非完整体验</h1><h2 id="跨平台实时同步粘贴板"><a href="#跨平台实时同步粘贴板" class="headerlink" title="跨平台实时同步粘贴板"></a>跨平台实时同步粘贴板</h2><p>不同的设备相互复制麻烦？用微信转发？不如直接共享粘贴板</p><p><img src="https://bu.dusays.com/2024/06/12/6669abbe4bdd8.webp" alt="1704378286310-1709032951641-2.webp"></p><h2 id="画面流转"><a href="#画面流转" class="headerlink" title="画面流转"></a>画面流转</h2><p>手机屏幕太小？不如把画面流转到电脑显示</p><p> <img src="https://bu.dusays.com/2024/06/12/6669abbea0089.webp" alt="投屏"></p><blockquote><p>画面流转到电脑端后电脑底部任务栏会出现一个手机标</p></blockquote><h2 id="桌面投屏"><a href="#桌面投屏" class="headerlink" title="桌面投屏"></a>桌面投屏</h2><p> 屏幕不够用？平板来凑！</p><p><img src="https://bu.dusays.com/2024/06/12/6669abbedb89c.webp" alt="微信图片_20240227194608"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;小米电脑管家是一款专为小米笔记本用户设计的电脑管理软件，是小米HyperConnect生态的重要一环。它提供了一系列强大的功能，包括驱动管理、硬件信息、设备互联等。其内置了小米的HyperConnect跨端智联功能。&lt;/p&gt;
&lt;p&gt;如果你是小米手机用户的话，那么非常建议你安</summary>
      
    
    
    
    <category term="技研笔记" scheme="https://agen233.top/categories/%E6%8A%80%E7%A0%94%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="HyperOS" scheme="https://agen233.top/tags/HyperOS/"/>
    
    <category term="小米" scheme="https://agen233.top/tags/%E5%B0%8F%E7%B1%B3/"/>
    
  </entry>
  
  <entry>
    <title>Win10LTSC基于MAS工具的数字权利激活方案</title>
    <link href="https://agen233.top/posts/28f20c60/"/>
    <id>https://agen233.top/posts/28f20c60/</id>
    <published>2024-02-16T02:13:28.000Z</published>
    <updated>2025-05-18T15:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>我个人日常用的操作系统主要是Win11和Linux，但是最近Win11出现了各种诸如崩explorer、崩环境变量等诸多问题，遂尝试返回Win10。</p><p>但原生的Win10过于臃肿，带有许多诸如”‘Windows人脉’”等没用也用不上的功能，而我只需要一个简单好用的桌面系统。但是第三方的精简镜像系统安全和稳定性完全没有保障。这时官方提供的LTSC就很香了</p><blockquote><p>Windows 10 LTSC是长期服务频道版本，专注于稳定性和长期支持，适用于对系统稳定性要求高的场景。</p><p>Windows10 LTSC，支持安全更新周期长达10年，为企业研制，官方精简版，没有商店小娜edge等UWP应用。缺点是缺少大版本升级。</p></blockquote><p>但是LTSC的激活不像是普通Win10一样直接用数字激活或者KMS就可以，需要替换系统文件和转换版本，比较麻烦，也算是记录一下。</p><h1 id="旧版升级到新版本是否保留激活"><a href="#旧版升级到新版本是否保留激活" class="headerlink" title="旧版升级到新版本是否保留激活"></a>旧版升级到新版本是否保留激活</h1><p>如果所谓的升级指的是从LTSB 2015 或2016、LTSC2019升级到最新LTSC2021，那么激活不会保留，之前激活的，现在仍然需要激活。</p><h1 id="版本转换"><a href="#版本转换" class="headerlink" title="版本转换"></a>版本转换</h1><ul><li>由于数字激活需要的版本为<strong>Windows 10 IoT 企业版 LTSC</strong>，但是IOT版本的LTSC无法直接安装，所以要从<strong>Windows10 企业版 LTSC版</strong>进行转换。</li><li>由于存在<strong>Enterprises</strong>和评估板EnterpriseSEval的区别，而评估板无法直接转换为IOT版，所以要先从<strong>EnterpriseSEval</strong>转换成<strong>Enterprises</strong></li></ul><h2 id="首先要明确当前的版本"><a href="#首先要明确当前的版本" class="headerlink" title="首先要明确当前的版本"></a>首先要明确当前的版本</h2><ul><li><p>如果你是使用微软提供的官方镜像进行安装，那应该是<strong>EnterpriseS</strong></p></li><li><p>如果你不知道，那么通过系统设置查看，如果是提示<strong>Windows10 企业版 LTSC</strong>或者<strong>Windows 10 企业评估版 LTSC</strong></p></li><li><p>一般渠道下载得到的镜像应该是<strong>Windows10 企业版 LTSC</strong>，微软评估中心下载的得到的镜像为<strong>Windows 10 企业评估版 LTSC</strong></p></li><li><p><em>但无论是评估板还是普通版LTSC，都需要转换为<strong>Windows 10 IoT 企业版 LTSC</strong>才能使用数字权利激活</em></p></li></ul><h2 id="Windows10-企业版-LTSC版"><a href="#Windows10-企业版-LTSC版" class="headerlink" title="Windows10 企业版 LTSC版"></a>Windows10 企业版 LTSC版</h2><p>如果你是普通<strong>Windows10 企业版 LTSC</strong>，那么直接在更改产品密钥处输入<code>QPM6N-7J2WJ-P88HH-P3YRH-YY74H</code>即可转换为<strong>Windows 10 IoT 企业版 LTSC</strong></p><h2 id="Windows-10-企业评估版-LTSC版"><a href="#Windows-10-企业评估版-LTSC版" class="headerlink" title="Windows 10 企业评估版 LTSC版"></a>Windows 10 企业评估版 LTSC版</h2><p>如果你是评估版，则需要先添加<strong>完整报告和许可证</strong></p><h3 id="（非必要但建议）备份当前密钥"><a href="#（非必要但建议）备份当前密钥" class="headerlink" title="（非必要但建议）备份当前密钥"></a>（非必要但建议）备份当前密钥</h3><p>注册表<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsNT\CurrentVersion\SoftwareProtectionPlatform</code>找到<code>BackupProductKeyDefault</code>，将其复制并保存。</p><h3 id="取消激活并卸载当前产品密钥"><a href="#取消激活并卸载当前产品密钥" class="headerlink" title="取消激活并卸载当前产品密钥"></a>取消激活并卸载当前产品密钥</h3><p>管理员权限打开cmd，并执行<code>slmgr /upk</code>，出现提示即卸载成功。</p><p> <img src="/Win10LTSC%E5%9F%BA%E4%BA%8EMAS%E5%B7%A5%E5%85%B7%E7%9A%84%E6%95%B0%E5%AD%97%E6%9D%83%E5%88%A9%E6%BF%80%E6%B4%BB%E6%96%B9%E6%A1%88/image-20240221231044636.png" alt="image-20240221231044636"></p><h3 id="导入并替换对应的许可证文件"><a href="#导入并替换对应的许可证文件" class="headerlink" title="导入并替换对应的许可证文件"></a>导入并替换对应的许可证文件</h3><p>下载并解压 <a href="https://wwi.lanzoup.com/iKu6c1oyuo2b">完整报告和许可证</a>，找到<strong>full</strong>文件夹。</p><ol><li><p>把<strong>system32</strong>内的文件复制到<code>%SYSTEMROOT%\System32\spp\tokens </code><font color=red><em><strong>并选择跳过已存在的文件</strong></em></font></p></li><li><p>把<strong>syswow64</strong>内的文件复制到<code>%SYSTEMROOT%\SysWOW64\spp\tokens</code><font color=red><em><strong>并选择跳过已存在的文件</strong></em></font></p></li><li><p>把<strong>tokens</strong>内的文件复制并覆盖到<code>%SYSTEMROOT%\System32\spp\store\2.0</code><font color=green><em><strong>并选择替换文件</strong></em></font></p></li><li><p>重启电脑，重启后可以发现，右下角水印已经消失。</p></li><li><p>管理员权限打开cmd，输入执行下列指令，即可。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">rem 重新安装许可证，重新激活系统中的许可证</span></span><br><span class="line">cscript.exe <span class="variable">%windir%</span>\system32\slmgr.vbs /rilc</span><br><span class="line"><span class="comment">rem 卸载当前的产品密钥</span></span><br><span class="line">cscript.exe <span class="variable">%windir%</span>\system32\slmgr.vbs /upk &gt;<span class="built_in">nul</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="comment">rem 清楚KMS</span></span><br><span class="line">cscript.exe <span class="variable">%windir%</span>\system32\slmgr.vbs /ckms &gt;<span class="built_in">nul</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="comment">rem 清楚KMS密钥缓存</span></span><br><span class="line">cscript.exe <span class="variable">%windir%</span>\system32\slmgr.vbs /cpky &gt;<span class="built_in">nul</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="comment">rem 安装密钥</span></span><br><span class="line">cscript.exe <span class="variable">%windir%</span>\system32\slmgr.vbs /ipk M7XTQ-FN8P6-TTKYV-<span class="number">9</span>D4CC-J462D</span><br><span class="line"><span class="comment">rem 启动并设置为自动启动LicenseManager服务</span></span><br><span class="line">sc config LicenseManager <span class="built_in">start</span>= auto &amp; <span class="built_in">net</span> <span class="built_in">start</span> LicenseManager</span><br><span class="line"><span class="comment">rem 启动并设置为自动启动 Windows更新服务</span></span><br><span class="line">sc config wuauserv <span class="built_in">start</span>= auto &amp; <span class="built_in">net</span> <span class="built_in">start</span> wuauserv</span><br><span class="line">ehco</span><br></pre></td></tr></table></figure><p>6.此时系统已从<strong>Windows10 企业版 LTSC版</strong>转换为”完整版” <strong>Windows10 企业版 LTSC版</strong></p></li></ol><p> <img src="/Win10LTSC%E5%9F%BA%E4%BA%8EMAS%E5%B7%A5%E5%85%B7%E7%9A%84%E6%95%B0%E5%AD%97%E6%9D%83%E5%88%A9%E6%BF%80%E6%B4%BB%E6%96%B9%E6%A1%88/image-20240221234452311.png" alt="image-20240221234452311"></p><ol start="7"><li><p>重启电脑，在更改产品密钥处输入<code>QPM6N-7J2WJ-P88HH-P3YRH-YY74H</code>，此时系统已经从<strong>Windows10 企业版 LTSC版</strong>转换为<strong>Windows 10 IoT 企业版 LTSC</strong></p></li><li><p>如果“7”无法将<strong>Windows10 企业版 LTSC</strong>转换为<strong>Windows 10 IoT 企业版 LTSC</strong>，可以尝试关闭杀毒软件的情况下，使用这个工具 <a href="https://wwz.lanzouv.com/imYmB0e8djkf">Win10版本一键转换</a></p></li></ol><h1 id="激活系统"><a href="#激活系统" class="headerlink" title="激活系统"></a>激活系统</h1><p><em>在联网状态下</em>，参考上图，确保系统为<strong>Windows 10 IoT 企业版 LTSC</strong></p><ol><li><p>用管理员权限打开<strong>PowerShell</strong>，执行<code>irm https://massgrave.dev/get | iex</code></p></li><li><p>输入“<strong>1</strong>”选择<strong>HWID</strong>即数字权利激活方式。</p></li><li><p>稍等即可激活成功</p><p> <img src="/Win10LTSC%E5%9F%BA%E4%BA%8EMAS%E5%B7%A5%E5%85%B7%E7%9A%84%E6%95%B0%E5%AD%97%E6%9D%83%E5%88%A9%E6%BF%80%E6%B4%BB%E6%96%B9%E6%A1%88/image-20240222003239123.png" alt="image-20240222003239123"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我个人日常用的操作系统主要是Win11和Linux，但是最近Win11出现了各种诸如崩explorer、崩环境变量等诸多问题，遂尝试返回Win10。&lt;/p&gt;
&lt;p&gt;但原生的Win10过于臃肿，带有许多诸如”‘Windows人脉’”等没用也用不上的功能，而我只需要一个简单好用</summary>
      
    
    
    
    <category term="技研笔记" scheme="https://agen233.top/categories/%E6%8A%80%E7%A0%94%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Windows" scheme="https://agen233.top/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>ESP-IDF踩坑记</title>
    <link href="https://agen233.top/posts/88fe7ba4/"/>
    <id>https://agen233.top/posts/88fe7ba4/</id>
    <published>2024-02-04T17:01:36.000Z</published>
    <updated>2025-05-18T15:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python版本问题"><a href="#Python版本问题" class="headerlink" title="Python版本问题"></a>Python版本问题</h1><p>在<strong>配置ESP-IDF插件</strong>中出现<code>&quot;C:\Espressif\tools\idf-python\3.11.2\python.exe -m pip&quot; is not valid. (ERROR_INVALID_PIP)</code></p><p>解决方法：打开CMD</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Espressif\tools\idf-python\<span class="number">3</span>.<span class="number">11</span>.<span class="number">2</span>\</span><br><span class="line">python.exe -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>如果出现<code>ModuleNotFoundError: No module named &#39;pip&#39;</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Espressif\tools\idf-python\<span class="number">3</span>.<span class="number">11</span>.<span class="number">2</span>\</span><br><span class="line">python -m ensurepip</span><br><span class="line">python.exe -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><h1 id="串口调试乱码问题"><a href="#串口调试乱码问题" class="headerlink" title="串口调试乱码问题"></a>串口调试乱码问题</h1><p>在打开调试窗口后，未出现预期的<strong>Hello World</strong>，而是出现乱码，这是波特率问题</p><p>解决方法：</p><ol><li>点击VSCODE左下角齿轮，选择<strong>设置</strong></li><li>在顶部搜索框中输入<strong>ESP-IDF:Monitor Baud Rate</strong></li><li>把框中修改成<em>115200</em></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python版本问题&quot;&gt;&lt;a href=&quot;#Python版本问题&quot; class=&quot;headerlink&quot; title=&quot;Python版本问题&quot;&gt;&lt;/a&gt;Python版本问题&lt;/h1&gt;&lt;p&gt;在&lt;strong&gt;配置ESP-IDF插件&lt;/strong&gt;中出现&lt;code&gt;</summary>
      
    
    
    
    <category term="芯途漫记" scheme="https://agen233.top/categories/%E8%8A%AF%E9%80%94%E6%BC%AB%E8%AE%B0/"/>
    
    
    <category term="ESP32" scheme="https://agen233.top/tags/ESP32/"/>
    
  </entry>
  
</feed>
